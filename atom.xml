<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ダン・クァン・ミン Blog]]></title>
  <link href="http://dankuanmei.github.io/atom.xml" rel="self"/>
  <link href="http://dankuanmei.github.io/"/>
  <updated>2015-09-03T11:19:41+09:00</updated>
  <id>http://dankuanmei.github.io/</id>
  <author>
    <name><![CDATA[ダン・クァン・ミン]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim Config]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/09/01/vim-config/"/>
    <updated>2015-09-01T09:18:07+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/09/01/vim-config</id>
    <content type="html"><![CDATA[<h3>.vimrc</h3>

<pre><code>set number
set ruler
set showmatch
set hlsearch

"--- tab ----
set tabstop=4
set shiftwidth=4

"--- indent ----
" 'autoindent' depends on a above line.
"set autoindent

" 'smartndent' analies several lines.
set smartindent

" 'cndent' is greatest for C-launguage.
"set cindent

"--- status ---
set laststatus=2

"--- ctags ---
set tags=.tags

"--- list ----
set list
set listchars=tab:&gt;-

"--- decoration ----
highlight SpecialKey ctermfg=grey
highlight ZenkakuSpace cterm=underline ctermfg=darkgrey

"--- xml sort ---
command XmlSort %s/&gt;&lt;/&gt;\r&lt;/g | setf xml | normal gg=G

"--- open binary ----
augroup BinaryXXD
    autocmd!
    autocmd BufReadPre  *.bin let &amp;binary =1
    autocmd BufReadPost * if &amp;binary | silent %!xxd -g 1
    autocmd BufReadPost * set ft=xxd | endif
    autocmd BufWritePre * if &amp;binary | %!xxd -r | endif
    autocmd BufWritePost * if &amp;binary | silent %!xxd -g 1
    autocmd BufWritePost * set nomod | endif
augroup END
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Apache, Mysql and Rails]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/16/setup-apache/"/>
    <updated>2015-08-16T22:54:58+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/16/setup-apache</id>
    <content type="html"><![CDATA[<p>Install apache2</p>

<pre><code>$ sudo yum install httpd
$ sudo service httpd start
</code></pre>

<p>Install mysql</p>

<pre><code>$ sudo yum install mysql-server
$ sudo service mysqld start
$ mysql_secure_installation

$ sudo yum install mlocate tree sysstat iftop dstat lsof tcpdump wget
$ sudo yum install libcurl-devel httpd-devel apr-devel apr-util-devel
$ sudo yum install mysql-devel
</code></pre>

<p>Set up rails</p>

<pre><code>$ sudo gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
$ curl -sSL https://get.rvm.io | bash
$ source ~/.profile
$ rvm install 2.2.2
$ rvm use 2.2.2 --default
$ gem install rails
</code></pre>

<!--more-->


<p>Edit file <code>/etc/httpd/conf/httpd.conf</code></p>

<pre><code>LoadModule passenger_module /home/kankou/.rvm/gems/ruby-2.2.2/gems/passenger-5.0.15/buildout/apache2/mod_passenger.so
&lt;IfModule mod_passenger.c&gt;
  PassengerRoot /home/kankou/.rvm/gems/ruby-2.2.2/gems/passenger-5.0.15
  PassengerDefaultRuby /home/kankou/.rvm/gems/ruby-2.2.2/wrappers/ruby
&lt;/IfModule&gt;

&lt;VirtualHost *:80&gt;
    ServerName kankouannai-apuri.local
    DocumentRoot /home/kankou/Kankouannai/public/
        RailsEnv development
        RailsBaseURI /
    &lt;Directory /home/kankou/Kankouannai/public/&gt;
        AllowOverride all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>Install passenger</p>

<pre><code>$ gem install passenger
$ passenger-install-apache2-module
</code></pre>

<p>Install vsftpd</p>

<pre><code>$ sudo yum install vsftpd
</code></pre>

<p>Install nodejs</p>

<pre><code>$ curl -sL https://rpm.nodesource.com/setup | sudo bash -
$ sudo yum install nodejs
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Step by Step]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/15/vagrant-step-by-step/"/>
    <updated>2015-08-15T18:24:08+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/15/vagrant-step-by-step</id>
    <content type="html"><![CDATA[<h3>Download VirtualBox for Linux Hosts</h3>

<p>Add the following line to your /etc/apt/sources.list:</p>

<pre><code>deb http://download.virtualbox.org/virtualbox/debian trusty contrib
</code></pre>

<p>Run command:</p>

<pre><code>$ wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get install virtualbox-5.0
$ sudo apt-get install dkms
</code></pre>

<!--more-->


<h3>Install Vagrant( on HostMachine )</h3>

<p>Please download vagrant from <code>http://www.vagrantup.com/downloads.html</code>.</p>

<p>Then run command:</p>

<pre><code>$ vagrant box add centos6_5 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box
</code></pre>

<p>Setup Vagrant( on HostMachine )</p>

<pre><code>$ vagrant init centos6_5
</code></pre>

<p>Please set ip address into Vagrantfile.</p>

<pre><code>Vagrant::Config.run do |config|
  config.vm.box = "centos6_5" 
  config.vm.network "public_network", ip:"192.168.1.156" 
  ...
</code></pre>

<p>Install sahara( on HostMachine )</p>

<p>Sahara can shot a snap for OS-image. You can commit your operations and rollback your operations.</p>

<pre><code>$ vagrant plugin install sahara
$ vagrant plugin install vagrant-vbguest
$ vagrant plugin install vagrant-omnibus
$ vagrant plugin install vagrant-berkshelf
$ vagrant plugin install vagrant-chef-zero
</code></pre>

<p>if you have an error, please install c++ compiler( debian:g++, redhat:gcc-c++ )</p>

<p>Wake up GuestMachine:</p>

<pre><code>$ vagrant up
$ vagrant ssh
</code></pre>

<p>change super user:</p>

<pre><code>$ su -
</code></pre>

<p>Default password of root user is <code>vagrant</code>.</p>

<p>Create user:</p>

<pre><code>$ useradd chefsfarms
$ passwd chefsfarms
Changing password for user chefsfarms.
New password: chefsfarms
Retype new password: chefsfarms
passwd: all authentication tokens updated successfully.
</code></pre>

<p>Add a user in super users:</p>

<pre><code>$ visudo
</code></pre>

<p>Then please add below.</p>

<pre><code>chefsfarms      ALL=(ALL)       NOPASSWD:ALL
</code></pre>

<p>Change mode home directory of the guest user:</p>

<pre><code>$ chmod 755 /home/chefsfarms
</code></pre>

<h3>Install Chef-Solo( on GuestMachine )</h3>

<pre><code>$ curl -L http://www.opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>Go to <code>https://downloads.chef.io/chef-dk/redhat/#/</code>. Get link download.</p>

<pre><code>$ wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.6.2-1.el6.x86_64.rpm

$ sudo rpm -Uvh chefdk-0.6.2-1.el6.x86_64.rpm

$ which chef

$ chef -v
</code></pre>

<p>Then run:</p>

<pre><code>$ chef generate repo chef-repo
$ cd chef-repo

$ vi Berksfile
</code></pre>

<p>Chèn source code sau vào.</p>

<pre><code>source "https://supermarket.chef.io"

cookbook 'application_ruby'
cookbook 'apt'
cookbook 'build-essential'
cookbook 'user'
cookbook 'ssh_known_hosts'
cookbook 'ruby_build'
cookbook 'vim'
</code></pre>

<p>Chạy command:</p>

<pre><code>$ berks vendor cookbooks
</code></pre>

<p>Thế là đã cài đặt xong. And now, all the needed cookbooks are downloaded into folder chef-repo/cookbooks</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Websocket Deploy on Apache2 With Passenger]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/13/rails-websocket-deploy-on-apache2-with-passenger/"/>
    <updated>2015-08-13T11:26:37+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/13/rails-websocket-deploy-on-apache2-with-passenger</id>
    <content type="html"><![CDATA[<p>Đầu tiên là tạo dự án rails đã.</p>

<pre><code>$ rails new sample-chat -d mysql
</code></pre>

<p>Sau đó config database trong file <code>config/database.yml</code></p>

<p>Bước tiếp theo đó là cài đặt gem <code>websocket-rails</code>trong <code>Gemfile</code></p>

<pre><code>gem "websocket-rails"
</code></pre>

<p>Chạy lệnh <code>bundle install</code></p>

<p>Chạy lệnh <code>rails g websocket_rails:install</code></p>

<p>WebsocketRailsコントローラの作成. Tạo file <code>app/controllers/websocket_chat_controller.rb</code></p>

<pre><code># WebsocketRails::BaseControllerを継承
class WebsocketChatController &lt; WebsocketRails::BaseController
  def message_recieve
    # クライアントからのメッセージを取得
    recieve_message = message()
    # websocket_chatイベントで接続しているクライアントにブロードキャスト
    broadcast_message(:websocket_chat, recieve_message)
  end
end
</code></pre>

<!--more-->


<p>Event Routerの設定. Sửa file <code>events.rb</code> trong thư mục config</p>

<pre><code>WebsocketRails::EventMap.describe do
  subscribe :websocket_chat, to: WebsocketChatController, with_method: :message_recieve
end
</code></pre>

<p>Tạo controller Chat đơn giản</p>

<pre><code>$ rails g controller Chat index
</code></pre>

<p>Trong file <code>index.html.erb</code> chèn source code này vào</p>

<pre><code>&lt;!-- チャット表示部分 --&gt;
&lt;ul id="chat_area"&gt;&lt;/ul&gt;

&lt;!-- コメントフォーム --&gt;
&lt;input id="comment" type="text"&gt;
&lt;input id="send" type="button" value="send"&gt;

&lt;script&gt;
  var ws_rails = new WebSocketRails("sample-chat.local:3001/websocket");
  // メッセージ受信時の処理
  ws_rails.bind("websocket_chat", function(message){
    var message_li = document.createElement("li");
    message_li.textContent = message;
    document.getElementById("chat_area").appendChild(message_li);
  });

  // メッセージ送信時の処理
  document.getElementById("send").onclick =  function(){
    var comment = document.getElementById("comment").value;
    ws_rails.trigger("websocket_chat", comment);
  }
&lt;/script&gt;
</code></pre>

<p>Rack::Lockの無効化. Trong file <code>config/environments/development.rb</code>, viết thêm dòng config này vào:</p>

<pre><code>config.middleware.delete Rack::Lock
</code></pre>

<p>Vậy là đã xong phần source code, giờ thì sẽ triển khai deploy trên Apache2, với Passenger &amp; Virtualhost.</p>

<p>Trong Gemfile điền thêm hai gem:</p>

<pre><code># Deploy
gem 'passenger'
gem 'therubyracer', platforms: :ruby
</code></pre>

<p>Bundle install xong thì chạy lệnh <code>passenger-install-apache2-module</code>. Thiết lập Passenger cho thằng Apache2.</p>

<p>Thiết lập thêm theo cách này cho chắc ăn. Nhưng hình như sẽ bị cảnh báo là confict. Hiện thời chưa thấy confilct gì cả.</p>

<p>First, install the PGP key for the repository server:</p>

<pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
</code></pre>

<p>Create an APT source file:</p>

<pre><code>sudo nano /etc/apt/sources.list.d/passenger.list
</code></pre>

<p>Insert the following line to add the Passenger repository to the file:</p>

<pre><code>deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main
</code></pre>

<p>Press CTRL+X to exit, type Y to save the file, and then press ENTER to confirm the file location.</p>

<p>Change the owner and permissions for this file to restrict access to root:</p>

<pre><code>sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
</code></pre>

<p>Update the APT cache:</p>

<pre><code>sudo apt-get update
</code></pre>

<p>Finally, install Passenger:</p>

<pre><code>sudo apt-get install libapache2-mod-passenger
</code></pre>

<p>Make sure the Passenger Apache module; it maybe enabled already:</p>

<pre><code>sudo a2enmod passenger
</code></pre>

<p>Restart Apache:</p>

<pre><code>sudo service apache2 restart
</code></pre>

<p>Giờ là lúc setup server apache. Hiện tại thì bắt buộc phải copy source code vào trong thư mục <code>/var/www</code>, khá là bất tiện.</p>

<pre><code>$ sudo vim /etc/apache2/sites-available/sample-chat.local.conf
</code></pre>

<p>Sau đó chèn code sau</p>

<pre><code>&lt;virtualhost *:80&gt;
    DocumentRoot "/var/www/sample-chat/public"
    ServerName sample-chat.local
    SetEnv RACK_ENV development

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    &lt;Directory "/var/www/sample-chat/public"&gt;
      Options FollowSymLinks
      Require all granted
    &lt;/directory&gt;

&lt;/virtualhost&gt;
</code></pre>

<p>Say đó sửa file <code>/etc/hosts</code> để thiết lập domain ảo ở local.</p>

<p>Chạy lệnh</p>

<pre><code>$ sudo a2ensite sample-chat.local
$ sudo service apache2 reload
$ sudo service apache2 restart
</code></pre>

<p>Vào trong thư mục source code chạy lệnh <code>rake secret</code>sau đó copy đoạn mã vào trong file <code>config/secret.yml</code></p>

<p>Sửa config trong file <code>config/initializers/websocket_rails.rb</code> về <code>config.standalone = true</code>. Sau đó chạy lệnh:</p>

<pre><code>$ rake websocket_rails:start_server
$ rake assets:precompile
</code></pre>

<p>Vậy là đã hoàn tất!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Tips]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/09/vim-tips/"/>
    <updated>2015-08-09T13:38:21+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/09/vim-tips</id>
    <content type="html"><![CDATA[<h3>Move left, up, down, right</h3>

<pre><code>Move left : [h]
Move up   : [j]
Move down : [k]
Move right: [l]
</code></pre>

<h3>Move word at a time</h3>

<pre><code>[w]  moves to the start of next word;
[e]  moves to the end of next word;
[b]  moves to beginning of the word;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial - Step by Step]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/08/rails-tutorial-step-by-step/"/>
    <updated>2015-08-08T10:49:19+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/08/rails-tutorial-step-by-step</id>
    <content type="html"><![CDATA[<h2>Init project</h2>

<h3>Create project</h3>

<pre><code>$ rails new project-name -d mysql
$ cd project-name
$ bundle install
$ bundle update
</code></pre>

<h3>Init bitbucket and heroku</h3>

<pre><code>$ git init
$ git remote add origin git@bitbucket.org:&lt;username&gt;/&lt;project-name&gt;

$ heroku create
$ heroku apps:rename &lt;new-name&gt;
</code></pre>

<!--more-->


<h3>Config heroku</h3>

<h4>Gemfile</h4>

<pre><code>group :production do
  gem 'puma'
  gem 'pg',             '0.17.1'
  gem 'rails_12factor', '0.0.2'
end
</code></pre>

<h4>Puma config</h4>

<p>Create <code>Procfile</code></p>

<pre><code>web: bundle exec puma -C config/puma.rb
</code></pre>

<p>Create a configuration file for Puma at <code>config/puma.rb</code></p>

<pre><code>workers Integer(ENV['WEB_CONCURRENCY'] || 2)
threads_count = Integer(ENV['MAX_THREADS'] || 5)
threads threads_count, threads_count

preload_app!

rackup      DefaultRackup
port        ENV['PORT']     || 3000
environment ENV['RACK_ENV'] || 'development'

on_worker_boot do
  ActiveRecord::Base.establish_connection
end
</code></pre>

<p>Run command</p>

<pre><code>$ heroku config:set MIN_THREADS=1 MAX_THREADS=1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android - Retrofit, OkHttp and GSON]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/31/android-retrofit/"/>
    <updated>2015-07-31T10:46:30+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/31/android-retrofit</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>Retrofit is a type-safe REST client for Android built by Square. The library provides a powerful framework for authenticating and interacting with APIs and sending network requests with OkHttp.</p>

<p>This library makes downloading JSON or XML data from a web API fairly straightforward. Once the data is downloaded then it is parsed into a Plain Old Java Object (POJO) which must be defined for each &ldquo;resource&rdquo; in the response.</p>

<h3>Setup</h3>

<p>Make sure to require Internet permissions in your <code>AndroidManifest.xml</code> file:</p>

<pre><code>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;
    .
    .
    .
&lt;/manifest&gt;
</code></pre>

<p>Add the following to your <code>app/build.gradle</code> file:</p>

<pre><code>dependencies {
  compile 'com.squareup.okhttp:okhttp:2.4.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.google.code.gson:gson:2.3'
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note Something When Work About Rails and Gmail]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/22/note-something-when-work-about-rails-and-gmail/"/>
    <updated>2015-07-22T10:49:06+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/22/note-something-when-work-about-rails-and-gmail</id>
    <content type="html"><![CDATA[<h3>To enable smtp for gmail account via rails</h3>

<p>Cần phải bật chế độ less secure</p>

<pre><code>https://www.google.com/settings/u/1/security/lesssecureapps
</code></pre>

<h3>List files to config</h3>

<pre><code>/config/environments/development.rb
#Chú ý line này, cần phải chính xác
config.action_mailer.default_url_options = { :host =&gt; '192.168.1.214:3000' }

/config/secrets.yml
# Chú ý line này, có lẽ phải giống với tên đăng ký gmail
admin_name: "Link works Japan"
</code></pre>

<h3>Edit Gemfile</h3>

<p>Thêm gem <code>pg</code> vào production khi deploy lên heroku</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note Something About Android Studio]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/21/note-something-about-android-studio/"/>
    <updated>2015-07-21T21:22:08+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/21/note-something-about-android-studio</id>
    <content type="html"><![CDATA[<h3>Create project with Google Plus login</h3>

<p>Cần phải sửa lại phiên bản của <code>play-services</code> trong file <code>build.gradle</code></p>

<pre><code>compile 'com.google.android.gms:play-services:6.1.71'
</code></pre>

<h3>Thao tác để enable Google Plus API</h3>

<ol>
<li><p>Go to the Google Developers Console</p></li>
<li><p>Click Create Project:</p>

<ul>
<li>In the Project name field, type in a name for your project, such as Quickstart App.</li>
<li>In the Project ID field, optionally type in a project ID for your project or use the one that the console has created for you. This ID must be unique world-wide.</li>
</ul>
</li>
<li><p>Click the Create button and wait for the project to be created. Note: There may be short delay of up to 30 seconds before the project is created. Once the project is created, the name you gave it appears at the top of the left sidebar.</p>

<ul>
<li>In the left sidebar, select APIs &amp; auth (the APIs sub-item is automatically selected).</li>
<li>Find the Google+ API and set its status to ON—notice that this action moves Google+ API to the top of the list; you can scroll up to see it.</li>
<li>In the sidebar under &ldquo;APIs &amp; auth&rdquo;, select Consent screen.</li>
<li>Choose an Email Address and specify a Product Name.</li>
<li>In the left sidebar under &ldquo;APIs &amp; auth&rdquo;, select Credentials.</li>
<li>Click Create a new Client ID—the Create Client ID dialog box appears, as shown further below.</li>
<li>Select Installed application for the application type.</li>
<li>Select Android as the installed application type.</li>
<li>Copy and paste the following package name for this quick-start app into the Package name field:
      com.google.android.gms.plus.sample.quickstart</li>
<li>In a terminal, run the the Keytool utility to get the SHA-1 fingerprint of the certificate. For the debug.keystore, the password is android.
      keytool -exportcert -alias androiddebugkey -keystore <path-to-debug-or-production-keystore> -list -v</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RESTful API in a Rails Application]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/20/building-a-restful-api-in-a-rails-application/"/>
    <updated>2015-07-20T13:02:29+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/20/building-a-restful-api-in-a-rails-application</id>
    <content type="html"><![CDATA[<h3>Auto setup</h3>

<pre><code>rails new PROJECT -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb
</code></pre>

<p>PROJECT is name</p>

<!--more-->


<h3>Devise</h3>

<p>Devise is a flexible authentication solution for Rails based on Warden. It:</p>

<ul>
<li>Is Rack based;</li>
<li>Is a complete MVC solution based on Rails engines;</li>
<li>Allows you to have multiple models signed in at the same time;</li>
<li>Is based on a modularity concept: use only what you really need.</li>
</ul>


<p>It&rsquo;s composed of 10 modules:</p>

<ul>
<li><code>Database Authenticatable</code> encrypts and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.</li>
<li><code>Omniauthable</code> adds OmniAuth (<a href="https://github.com/intridea/omniauth">https://github.com/intridea/omniauth</a>) support.</li>
<li><code>Confirmable</code> sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.</li>
<li><code>Recoverable</code> resets the user password and sends reset instructions.</li>
<li><code>Registerable</code> handles signing up users through a registration process, also allowing them to edit and destroy their account.</li>
<li><code>Rememberable</code> manages generating and clearing a token for remembering the user from a saved cookie.</li>
<li><code>Trackable</code> tracks sign in count, timestamps and IP address.</li>
<li><code>Timeoutable</code> expires sessions that have not been active in a specified period of time.</li>
<li><code>Validatable</code> provides validations of email and password. It&rsquo;s optional and can be customized, so you&rsquo;re able to define your own validations.</li>
<li><code>Lockable</code> locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.</li>
</ul>


<h5>Getting started</h5>

<pre><code>gem 'devise'

rails generate devise:install

rails generate devise MODEL
</code></pre>

<p>Replace MODEL with the class name used for the application’s users (it’s frequently User but could also be Admin).</p>

<p>This will create a model (if one does not exist) and configure it with default Devise modules. The generator also configures your config/routes.rb file to point to the Devise controller.</p>

<p>Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&rsquo;ll need to uncomment the Confirmable section in the migration.</p>

<p>Then run:</p>

<pre><code>rake db:migrate
</code></pre>

<p>Next, you need to set up the default URL options for the Devise mailer in each environment.</p>

<p>Here is a possible configuration for config/environments/development.rb:</p>

<pre><code>config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Apache2 and Passenger]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/20/install-apache2-and-passenger/"/>
    <updated>2015-07-20T11:23:25+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/20/install-apache2-and-passenger</id>
    <content type="html"><![CDATA[<h3>Update hệ thống và cài đặt cái gói build cơ bản</h3>

<pre><code>apt-get update
apt-get upgrade
apt-get install build-essential
</code></pre>

<h3>Cài đặt Ruby</h3>

<pre><code>curl -sSL https://rvm.io/mpapis.asc | gpg --import -
curl -sSL https://get.rvm.io | bash -s stable

rvm install 2.2.2
rvm use 2.2.2 --default
</code></pre>

<h3>Cài đặt Apache2 và Passenger</h3>

<pre><code>apt-get install apache2
passenger-install-apache2-module
</code></pre>

<!--more-->


<h3>Config Apache2 với Passenger sau khi đã cài đặt xong Passenger</h3>

<p>Tạo file /etc/apache2/mods-available/passenger.load</p>

<pre><code>LoadModule passenger_module /home/root/.rvm/gems/ruby-2.2.2/gems/passenger-5.0.14/buildout/apache2/mod_passenger.so
</code></pre>

<p>Tạo file /etc/apache2/mods-available/passenger.conf</p>

<pre><code>&lt;IfModule mod_passenger.c&gt;
     PassengerRoot /home/deploy/.rvm/gems/ruby-2.2.2/gems/passenger-5.0.14
     PassengerDefaultRuby /home/deploy/.rvm/gems/ruby-2.2.2/wrappers/ruby
     PassengerMaxPoolSize 10
&lt;/IfModule&gt;
</code></pre>

<p>Run command</p>

<pre><code>a2enmod passenger
</code></pre>

<h3>Config app Rails và add domain/sub-domain</h3>

<p>Các bạn có thể tạo 1 file với tên bất kì trong thư mục /etc/apache2/sites-enabled</p>

<p>Như mình thì cứ mỗi 1 app Rails/PHP mình sẽ tạo 1 file ở đây, sau này mình muốn gỡ app nào đó đi mình chỉ cần xóa file đó là được.</p>

<p>Ví dụ với app Rails của mình gắn với domain: ruby.rocks, mình sẽ tạo file có tên là: ruby.rocks.conf có nội dung như sau:</p>

<pre><code>&lt;VirtualHost *:80&gt;
  ServerName ruby.rocks
  DocumentRoot /home/root/mania-rails-test/public
  RailsEnv production
    &lt;Directory /home/root/mania-rails-test/public&gt;
        Allow from all
        Options -MultiViews
        Require all granted
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>Giải thích các chỉ thị trong file này:</p>

<ul>
<li>VirtualHost *:80: bạn đang chỉ định rằng app này có thể được truy cập từ bên ngoài qua cổng 80</li>
<li>ServerName ruby.rocks: đây chính là tên miền mà bạn muốn gắn với app Rails này</li>
<li>DocumentRoot /home/root/mania-rails-test/public: đây là nơi để bạn define đường dẫn tới app Rails của bạn, và theo convention của Passenger thì sẽ là: $RAILS_ROOT_PATH + /public. Ví dụ app Rails của mình đặt tại /home/root/mania-rails-test/. Thì mình sẽ để là /home/root/mania-rails-test/public</li>
<li>RailsEnv production Môi trường khi chạy app Rails này</li>
<li>Tại thẻ Directory các bạn cũng để đường dẫn tới app Rails của mình giống như DocumentRoot</li>
<li>Các phần còn lại trong thẻ Directory các bạn giữ nguyên, chúng ta sẽ nói về phần này sau.</li>
</ul>


<p>Cuối cùng chạy command</p>

<pre><code>service apache2 restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL Beginner]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/15/opengl-beginner/"/>
    <updated>2015-07-15T22:03:54+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/15/opengl-beginner</id>
    <content type="html"><![CDATA[<h3>Opening a window</h3>

<p>Ok, let’s go. First, we’ll have to deal with dependencies : we need some basic stuff to display messages in the console :</p>

<pre><code>// Include standard headers
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</code></pre>

<!--more-->


<p>First, GLEW. So this one actually is a little bit magic, but let’s leave this for later.</p>

<pre><code>// Include GLEW. Always include it before gl.h and glfw.h, since it's a bit magic.
#include &lt;GL/glew.h&gt;
</code></pre>

<p>We decided to let GLFW handle the window and the keyboard, so let’s include it too :</p>

<pre><code>// Include GLFW
#include &lt;GL/glfw3.h&gt;
</code></pre>

<p>We don’t actually need this one right now, but this is a library for 3D mathematics. It will prove very useful soon. There is no magic in GLM, you can write your own if you want; it’s just handy. The “using namespace” is there to avoid typing “glm::vec3″, but “vec3″ instead.</p>

<pre><code>// Include GLM
#include &lt;glm/glm.hpp&gt;
using namespace glm;
</code></pre>

<p>If you cut’n paste all these #include’s in playground.cpp, the compiler will complain that there is no main() function. So let’s create one :</p>

<pre><code>int main(){
}
</code></pre>

<p>First thing to do it to initialize GLFW :</p>

<pre><code>// Initialise GLFW
if( !glfwInit() )
{
    fprintf( stderr, "Failed to initialize GLFW\n" );
    return -1;
}
</code></pre>

<p>We can now create our first OpenGL window !</p>

<pre><code>glfwWindowHint(GLFW_SAMPLES, 4); // 4x antialiasing
glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); // We want OpenGL 3.3
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // To make MacOS happy; should not be needed
glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //We don't want the old OpenGL 

// Open a window and create its OpenGL context 
GLFWwindow* window; // (In the accompanying source code, this variable is global) 
window = glfwCreateWindow( 1024, 768, "Tutorial 01", NULL, NULL); 
if( window == NULL ){
    fprintf( stderr, "Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.\n" );
    glfwTerminate();
    return -1;
}
glfwMakeContextCurrent(window); // Initialize GLEW 
glewExperimental=true; // Needed in core profile 
if (glewInit() != GLEW_OK) {
    fprintf(stderr, "Failed to initialize GLEW\n");
    return -1;
}
</code></pre>

<p>Build this and run. A window should appear, and be closed right away. Of course ! We need to wait until the user hits the Escape key :</p>

<pre><code>// Ensure we can capture the escape key being pressed below
glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);

do{
    // Draw nothing, see you in tutorial 2 !

    // Swap buffers
    glfwSwapBuffers(window);
    glfwPollEvents();

} // Check if the ESC key was pressed or the window was closed
while( glfwGetKey(window, GLFW_KEY_ESCAPE ) != GLFW_PRESS &amp;&amp;
glfwWindowShouldClose(window) == 0 );
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Resource]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/15/free-resource/"/>
    <updated>2015-07-15T21:21:47+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/15/free-resource</id>
    <content type="html"><![CDATA[<h3>SNS avatar generator</h3>

<p><code>uiFaces</code></p>

<p><a href="http://uifaces.com/">http://uifaces.com/</a></p>

<p>Dùng trong trường hợp muốn tạo ra một loạt avatar dùng cho demo vân vân.</p>

<p>Có tích hợp cả API, rất đáng để dùng thử.</p>

<h3>Free Video</h3>

<p><code>mazwai</code></p>

<p><a href="http://mazwai.com/#index">http://mazwai.com/#index</a></p>

<p>Toàn là video nhìn rất cool.</p>

<p><code>jQuery video background plugin</code></p>

<p><a href="https://github.com/VodkaBears/Vide">https://github.com/VodkaBears/Vide</a></p>

<h3>Icon</h3>

<p><code>iconfinder</code></p>

<p><a href="https://www.iconfinder.com/">https://www.iconfinder.com/</a></p>

<h3>Html template</h3>

<p><code>html5up</code></p>

<p><a href="http://html5up.net/">http://html5up.net/</a></p>

<p><code>startbootstrap</code></p>

<p><a href="http://startbootstrap.com/">http://startbootstrap.com/</a></p>

<p><code>blacktie</code></p>

<p><a href="http://www.blacktie.co/">http://www.blacktie.co/</a></p>

<h3>Free logo</h3>

<p><code>Squarespace</code> (Recommend)</p>

<p><a href="http://www.squarespace.com/logo#">http://www.squarespace.com/logo#</a></p>

<p><code>LOGASTER</code></p>

<p><a href="https://www.logaster.com/">https://www.logaster.com/</a></p>

<h3>CSS animation</h3>

<p><code>Animate.css</code> (Recommend)</p>

<p><a href="http://daneden.github.io/animate.css/">http://daneden.github.io/animate.css/</a></p>

<h3>HTML Gen</h3>

<p><code>coveloping</code> (Recommend)</p>

<p><a href="http://coveloping.com/">http://coveloping.com/</a></p>

<p>Tập hợp rất nhiều công cụ dùng để sinh ra các phần trong trang HTML như price page vân vân.</p>

<p><code>TeamPage.io</code></p>

<p><a href="http://www.teampage.io/">http://www.teampage.io/</a></p>

<p>Tạo team member page một cách rất đơn giản.</p>

<p><code>FRAME</code></p>

<p><a href="http://frame.lab25.co.uk/">http://frame.lab25.co.uk/</a></p>

<p>Sinh ra 1 top page na ná như trang đó.</p>

<p><code>UICloud</code></p>

<p><a href="http://ui-cloud.com/">http://ui-cloud.com/</a></p>

<p>Trang chuyên dùng cho việc search tham khảo những thành phần của UI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install openGL in Ubuntu]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/15/install-opengl-in-ubuntu/"/>
    <updated>2015-07-15T01:22:58+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/15/install-opengl-in-ubuntu</id>
    <content type="html"><![CDATA[<h3>Install command line</h3>

<pre><code>$ sudo apt-get install freeglut3-dev libglew1.5-dev

$ sudo apt-get install libxmu-dev libxi-dev

$ sudo apt-get install binutils-gold
</code></pre>

<h3>Complie command line</h3>

<pre><code>$ cc -I/usr/X11R6/include program.c -L/usr/X11R6/lib -lglut -lGLU -lGL -lXmu -lXi -lXext -lX11 -lm -lpthread

$ function ccgl() { cc -I/usr/X11R6/include "$@" -L/usr/X11R6/lib -lglut -lGLU -lGL -lXmu -lXi -lXext -lX11 -lm -lpthread; }

$ ccgl program.c
</code></pre>

<!--more-->


<h2>#</h2>

<table>
<thead>
<tr>
<th> C                           </th>
<th> OpenGL                      </th>
</tr>
</thead>
<tbody>
<tr>
<td> signed char                 </td>
<td> GLbyte                      </td>
</tr>
<tr>
<td> unsigned char               </td>
<td> GLubyte, GLboolean          </td>
</tr>
<tr>
<td> short                       </td>
<td> GLshort                     </td>
</tr>
<tr>
<td> unsigned short              </td>
<td> GLushort                    </td>
</tr>
<tr>
<td> int, long                   </td>
<td> GLint, GLsizei              </td>
</tr>
<tr>
<td> unsigned int, unsigned long </td>
<td> GLuint, GLenum, GLbitfield  </td>
</tr>
<tr>
<td> float                       </td>
<td> GLfloat, GLclampf           </td>
</tr>
<tr>
<td> double                      </td>
<td> GLdouble, GLclampd          </td>
</tr>
</tbody>
</table>


<h3>Function</h3>

<p>void glutInit(int *argcp, char **argv);</p>

<p>glutInitWindowPosition();</p>

<p>glutInitWindowSize();</p>

<p>glutInitDisplayMode();</p>

<ul>
<li>GLUT_RGBA RGBA モード</li>
<li>GLUT_RGBAも GLUT_INDEX も記述されないときのデフォルト</li>
<li>GLUT_RGB  GLUT_RGBA と同じ</li>
<li>GLUT_INDEX    カラーインデックス モード</li>
<li>GLUT_RGBAも記述された場合，上書きする</li>
<li>GLUT_SINGLE   シングルバッファ モード</li>
<li>GLUT_DOUBLE もGLUT_SINGLEも記述されていない場合の デフォルトである</li>
<li>GLUT_DOUBLE   ダブルバッファ モード</li>
<li>GLUT_SINGLE も記述されていた場合，上書きする</li>
<li>GLUT_ACCUM    アキュムレーション バッファ</li>
<li>GLUT_ALPHA    カラーバッファにアルファ成分を加えること</li>
<li>GLUT_DEPTH    デプス(Z)バッファを加えること</li>
<li>GLUT_STENCIL  ステンシル・バッファを加えること</li>
<li>GLUT_MULTISAMPLE  マルチサンプリングのサポート</li>
<li>GLX_SAMPLE_SGIS エクステンションをサポートしていなければならない</li>
<li>GLUT_STEREO   ステレオ・ウィンドウビットマスク</li>
</ul>


<p>int glutCreateWindow(char *name);</p>

<p>void glutDisplayFunc(void (*func)(void));</p>

<p>void glClear(GLbitfield mask);</p>

<p>void glClearColor(GLclampf red,  GLclampf green,  GLclampf blue,  GLclampf alpha);</p>

<p>void glBegin(GLenum  mode);</p>

<p>void glEnd(void);</p>

<p>void glFlush();</p>

<h3>Sample</h3>

<pre><code>#include &lt;windows.h&gt;
#include &lt;GL/gl.h&gt;
#include &lt;GL/glut.h&gt;

void disp(void) {
    glClearColor(1 , 1 , 1 , 0);
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POLYGON);
    glEnd();

    glFlush();
}

int main(int argc , char ** argv) {
    glutInit(&amp;argc , argv);
    glutInitWindowPosition(100 , 50);
    glutInitWindowSize(200 , 100);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);

    glutCreateWindow("Kitty on your lap");
    glutDisplayFunc(disp);
    glutMainLoop();
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install GoLang]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/11/install-golang/"/>
    <updated>2015-07-11T13:46:29+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/11/install-golang</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Design Patterns - Factory Methods]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/11/java-design-patterns-factory-methods/"/>
    <updated>2015-07-11T11:38:55+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/11/java-design-patterns-factory-methods</id>
    <content type="html"><![CDATA[<p>Định nghĩa một interface cho việc tạo ra một đối tượng, nhưng để cho các lớp con quyết định lớp nào sẽ tạo đối tượng. Factory Method cho phép một lớp hoãn việc tạo đối tượng sang các lớp con.</p>

<p><img src="http://i.imgur.com/KCE7HIw.png"></p>

<!--more-->


<h2>#</h2>

<p>Interface sản phẩm</p>

<pre><code>public interface Weapon {

}
</code></pre>

<h2>#</h2>

<p>Interface factory chứa method để tạo sản phẩm</p>

<pre><code>public interface Blacksmith {

    Weapon manufactureWeapon(WeaponType weaponType);

}
</code></pre>

<h2>#</h2>

<p>Các subclass factory thực thi để tạo sản phẩm</p>

<pre><code>public class ElfBlacksmith implements Blacksmith {

    public Weapon manufactureWeapon(WeaponType weaponType) {
        return new ElfWeapon(weaponType);
    }

}

public class OrcBlacksmith implements Blacksmith {

    public Weapon manufactureWeapon(WeaponType weaponType) {
        return new OrcWeapon(weaponType);
    }

}
</code></pre>

<h2>#</h2>

<p>Các subclass sản phẩm</p>

<pre><code>public class ElfWeapon implements Weapon {

    private WeaponType weaponType;

    public ElfWeapon(WeaponType weaponType) {
        this.weaponType = weaponType;
    }

    @Override
    public String toString() {
        return "Elven " + weaponType;
    }

}

public class OrcWeapon implements Weapon {

    private WeaponType weaponType;

    public OrcWeapon(WeaponType weaponType) {
        this.weaponType = weaponType;
    }

    @Override
    public String toString() {
        return "Orcish " + weaponType;
    }

}
</code></pre>

<h2>#</h2>

<p>Class chứa loại sản phẩm</p>

<pre><code>public enum WeaponType {

    SHORT_SWORD("short sword"), SPEAR("spear"), AXE("axe"), UNDEFINED("");

    private String title;

    WeaponType(String title) {
        this.title = title;
    }

    @Override
    public String toString() {
        return title;
    }
}
</code></pre>

<h3>Application</h3>

<p>Class chạy thực thi, khởi tạo đối tượng sản phẩm và đối tượng factory. Tạo factory tương ứng với sản phẩm muốn tạo và truyền vào loại sản phẩm.</p>

<pre><code>/**
 * 
 * In Factory Method we have an interface (Blacksmith) with a method for
 * creating objects (manufactureWeapon). The concrete subclasses (OrcBlacksmith,
 * ElfBlacksmith) then override the method to produce objects of their liking.
 * 
 */
public class App {

    public static void main(String[] args) {
        Blacksmith blacksmith;
        Weapon weapon;

        blacksmith = new f();
        weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
        System.out.println(weapon);
        weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
        System.out.println(weapon);

        blacksmith = new ElfBlacksmith();
        weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
        System.out.println(weapon);
        weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
        System.out.println(weapon);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstract Factory và Factory Method]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/10/abstract-factory-va-factory-pattern/"/>
    <updated>2015-07-10T21:08:50+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/10/abstract-factory-va-factory-pattern</id>
    <content type="html"><![CDATA[<p><code>Interviewer</code> Chà chà, chào hai anh, đây là lần đầu tiên blog của iem phỏng vấn hai anh, hai anh cảm thấy thế nào.</p>

<p><code>Factory Method</code> Tôi ko biết sao hay bị gộp chúng với cha <code>Abstract Factory</code>. Đều là factory pattern không có nghĩa chúng tôi không được có những buổi phỏng vấn riêng.</p>

<p><code>Interviewer</code> Ấy ấy, đừng tự ái, em muốn phỏng vấn cả hai anh cùng nhau để giúp đọc giả phân biệt được ai là ai. Hai anh có nhiều điểm giống nhau, và em có nghe vài phàn nàn rằng người ta thỉnh thoảng bị rối và không thể phân biệt được 2 người.</p>

<p><code>Abstract Factory</code> Ừ đúng đấy, đã có lúc tôi bị nhầm lẫn là cha <code>Factory Method</code>, và tôi biết ổng cũng bị giống như tôi. Hai tụi tôi đều giỏi trong việc giảm sự phụ thuộc giữa chương trình với những cài đặt cụ thể; nhưng mỗi người chúng tôi lại có những cách làm riêng nên thỉnh thoảng dân lập trình lại cảm thấy rối và không thể xác định được phải dùng cách nào.</p>

<p><code>Factory Method</code> Ấy, người ta vẫn phân biệt được tôi mà. Nói chung, tôi dùng các lớp để tạo ra products, còn cha dùng những đối tượng; hai cách đó hoàn toàn khác nhau nhé.</p>

<p><code>Interviewer</code> Ừ em có tìm hiểu về hai anh rồi mà vẫn còn rối đây này, anh có thể nói thêm về khoản này không, anh <code>Factory Method</code>?</p>

<p><code>Factory Method</code> Ok, Cả cha <code>Abstract Factory</code> và tôi đều tạo ra các products, các objects, đó là việc chúng tôi phải làm. Nhưng tôi làm nhờ vào sự kế thừa (inheritance) …</p>

<p><code>Abstract Factory</code> … còn tôi làm nhờ vào sự kết hợp các đối tượng.</p>

<p><code>Factory Method</code> Đúng thía, nghĩa là nếu muốn tạo ra các đối tượng bằng cách <code>Factory Method</code>, người ta cần phải extend một lớp và override lại hàm tạo <code>Factory Method</code>.</p>

<p><code>Interviewer</code> …rồi <code>Factory Method</code> sẽ làm cái gì?</p>

<p><code>Factory Method</code> Tất nhiên là tạo ra 1 object roài, anh đã từng viết bài về tôi mà giờ còn hỏi hả. Ý tưởng của tôi, <code>Factory Method</code> Pattern, là sẽ sử dụng các lớp con để sinh ra 1 đối tượng mong muốn. Bằng cách đó, người dùng sẽ chỉ cần biết đến lớp trừu tượng như gia cầm, và các lớp con cụ thể sẽ lo về các kiểu gà, kiểu vịt, kiểu ngan. Vì vậy, nói theo cách khác, tôi giúp chương trình độc lập với các kiểu (type) cụ thể đó.</p>

<p><code>Abstract Factory</code> Ý tưởng của tôi cũng giống giống vậy đó, nhưng chỉ là làm theo một cách khác…</p>

<p><code>Interviewer</code> Tiếp đi anh <code>Abstract Factory</code> … vừa rồi anh có đề cập đến cách kết hợp các đối tượng?</p>

<p><code>Abstract Factory</code> Ờ,cách của tôi thế này: Tôi tạo ra một kiểu trừu tượng (abstract type) để dùng vào việc tạo ra một nhóm những products khác. Khi đó, những lớp con của kiểu trừu tượng sẽ xác định cách tạo ra các products này. Để áp dụng được ý tưởng của tôi, bạn phải tạo ra một instance của một trong các lớp con trên (instance này là 1 factory) và đưa nó vào chỗ cần thiết trong code. Vì thế, giống như <code>Factory Method</code>, những nơi sử dụng factory của tôi sẽ hoàn toàn độc lập với những produtcts cụ thể.</p>

<p><code>Interviewer</code> Oh yè, tôi biết rồi, một lợi ích nữa của cách này là anh đã nhóm các products tương tự nhau lại, có đúng không?</p>

<p><code>Abstract Factory</code> Đúng roài cưng à.</p>

<p><code>Interviewer</code> Bây giờ người ta cần bổ sung thêm một product nữa vô nhóm các products mà anh có thể tạo ra. Vậy không cần phải thay đổi gì hết huh?</p>

<p><code>Abstract Factory</code> Hèm, trường hợp này thì tôi phải thay đổi chút ít, nhiều người không thích lắm ở điểm này.</p>

<p><code>Factory Method</code> hĩ hĩ</p>

<p><code>Abstract Factory</code> Cười gì cha nội?</p>

<p><code>Factory Method</code> Cười chứ sao ko cười, làm vậy quá mất công chứ gì nữa. Cha thay đổi có nghĩa là người dùng phải đi mà đổi tất cả các lớp con roài? (các lớp con ở đây là các factories)</p>

<p><code>Abstract Factory</code> Đúng, nhưng cần phải làm như vậy vì tôi có khả năng tạo ra nhiều kiểu product khác nhau, trong khi người ta xài cách của anh khi họ cần tạo ra một kiểu product nào đó thôi, vì thế anh không có cồng kềnh như tôi, anh chỉ cần một method duy nhất.</p>

<p><code>Interviewer</code> Anh <code>Abstract Factory</code> bớt nóng, tôi nghe đồn rằng anh thường sử dụng nhiều hàm <code>Factory Method</code> theo cách của anh <code>Factory Method</code> để tạo các đổi tượng bên trong những factories của anh, điều đó có đúng ko?</p>

<p><code>Abstract Factory</code> Đúng đó em, anh thừa nhận điêu này. Những lớp factory con thường dùng các <code>Factory Method</code> để tạo các products tương ứng. Trong trường hợp này, các <code>Factory Method</code> được dùng thuần túy để tạo ra các products.</p>

<p><code>Factory Method</code> … còn tôi dùng hàm <code>Factory Method</code> để tạo ra product cụ thể mà người ta muốn, người dùng sẽ không biết cái gì được tạo ra, họ chỉ cần gọi hàm.</p>

<p><code>Interviewer</code> Dường như hai anh làm rất tốt công việc của mình. Tôi chắc rằng đọc giả đã có được lựa chọn của mình. Sau cùng, những factories của 2 anh quả thật rất hữu ích, đọc giả của tôi sẽ sử dụng chúng trong các tình huống thích hợp nhất. Các anh đều đóng gói (encapsulate) quá trình tạo ra đối tượng để giúp chương trình độc lập và giảm phụ thuộc với những kiểu cụ thể, việc làm này thật đáng tuyên dương. Cám ơn hai anh, hai anh có lời gì trước khi chào tạm biệt đọc giả không ạ?</p>

<p><code>Abstract Factory</code> Cám ơn. Hãy nhớ đến tôi, <code>Abstract Factory</code>, và sử dụng tôi bất cứ khi nào bạn cần cùng một lúc tạo ra nhiều loại products, và khi bạn muốn chắc chắn những nơi sử dụng sẽ không cần biết đến những lớp cụ thể khi cần làm việc này.</p>

<p><code>Factory Method</code> Còn tôi là <code>Factory Method</code>, hãy sử dụng tôi để làm cho chương trình của bạn độc lập với những lớp cụ thể mà bạn cần tạo 1 đối tượng, hoặc khi bạn không biết sau này sẽ cần đến những lớp con nào nữa. Khi cần sử dụng tôi, hãy tạo tạo ra subclass (1 factory implement 1 kiểu abstract) và implement <code>Factory Method</code> cho chính bạn.</p>

<p>(Page 158-162 of Head First – Design Pattern)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Design Patterns - Abstract Factory]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/10/java-design-patterns-abstract-factory/"/>
    <updated>2015-07-10T20:08:31+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/10/java-design-patterns-abstract-factory</id>
    <content type="html"><![CDATA[<p>The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes.In normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part of the theme. The client doesn&rsquo;t know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products.This pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface.</p>

<p>An example of this would be an abstract factory class DocumentCreator that provides interfaces to create a number of products (e.g. createLetter() and createResume()). The system would have any number of derived concrete versions of the DocumentCreator class like FancyDocumentCreator or ModernDocumentCreator, each with a different implementation of createLetter() and createResume() that would create a corresponding object like FancyLetter or ModernResume. Each of these products is derived from a simple abstract class like Letter or Resume of which the client is aware. The client code would get an appropriate instance of the DocumentCreator and call its factory methods. Each of the resulting objects would be created from the same DocumentCreator implementation and would share a common theme (they would all be fancy or modern objects). The client would only need to know how to handle the abstract Letter or Resume class, not the specific version that it got from the concrete factory.</p>

<p>A factory is the location of a concrete class in the code at which objects are constructed. The intent in employing the pattern is to insulate the creation of objects from their usage and to create families of related objects without having to depend on their concrete classes.This allows for new derived types to be introduced with no change to the code that uses the base class.</p>

<p>Use of this pattern makes it possible to interchange concrete implementations without changing the code that uses them, even at runtime. However, employment of this pattern, as with similar design patterns, may result in unnecessary complexity and extra work in the initial writing of code. Additionally, higher levels of separation and abstraction can result in systems which are more difficult to debug and maintain.</p>

<p><img src="http://i.imgur.com/pmd3pvQ.png"></p>

<p>Factory design pattern phải đảm bảo được những yếu tố sau:</p>

<ul>
<li>Việc khởi tạo những object phải được che giấu ở phía client.</li>
<li>Việc sử dụng những object mới được tạo ra phải thông qua một common interface.</li>
</ul>


<p>Việc triển khai này thực sự rất đơn giản, nó bao gồm những bước sau:</p>

<ul>
<li>Client cần một product, nhưng thay vì khởi tạo product object trực tiếp thông qua từ khóa new, nó sẽ hỏi factory object cho việc khởi tạo một object mới của product, cung cấp thông tin về loại dữ liệu của object cần thiết.</li>
<li>Phía factory sẽ khởi tạo một object cụ thể và trả về cho client một object product mới được tạo(đã được ép kiểu thành loại abstract product class)</li>
<li>Client sử dụng những object product này như là abstract product mà không quan tâm đến việc chúng được khởi tạo như thế nào.</li>
</ul>


<p>Ví dụ về một ứng dụng có chức năng tạo giao diện GUI. Ứng dụng của bạn sẽ có một client, GUIs là những product. Tất cả những GUI này đều có nguồn gốc từ một abstract class(hoặc một interface). GUI class này định nghĩa ra Button hay Label theo mỗi loại máy tính cụ thể. Giả sử có lệnh từ client là tạo Button và Label cho máy Windows, trong source code bạn phải nhận diện được kiểu máy tính như là một tham số, sau đó sẽ gọi đến Factory để thực hiện tạo ra giao diện tương ứng, ở đây là cho máy Windows. Như vậy, phía client hoàn toàn không cần quan tâm đến việc thực hiện tạo ra giao diện là như thế nào. Đó chính là mục đích của Factory Design Pattern.</p>

<p>Lợi ích ở đây chính là việc một hay nhiều loại máy tính mới có thể được thêm vào mà không cần phải sửa lại source code của ứng dụng quá nhiều. Việc thay đổi source code hoàn toàn không ảnh hưởng đến factory class.</p>

<h3>Java Example</h3>

<p>GuiFactory example</p>

<h4>Abstract Product</h4>

<pre><code>interface Button {
    void paint();
}

interface Label {
    void paint();
}
</code></pre>

<h4>Abstract Factory</h4>

<pre><code>interface GUIFactory {
    Button createButton();
    Label createLabel();
}
</code></pre>

<h4>Concrete Factory</h4>

<pre><code>class WinFactory implements GUIFactory {
    public Button createButton() {
        return new WinButton();
    }

    public Label createLabel() {
        return new WinLabel();
    }
}

class OSXFactory implements GUIFactory {
    public Button createButton() {
        return new OSXButton();
    }

    public Label createLabel() {
        return new OSXLabel();
    }

}
</code></pre>

<h4>Concrete Product</h4>

<pre><code>class OSXButton implements Button {
    public void paint() {
        System.out.println("I'm an OSXButton");
    }
}

class WinButton implements Button {
    public void paint() {
        System.out.println("I'm a WinButton");
    }
}

class OSXLabel implements Label {
    public void paint() {
        System.out.println("I'm an OSXLabel");
    }
}

class WinLabel implements Label {
    public void paint() {
        System.out.println("I'm a WinLabel");
    }
}
</code></pre>

<h4>Client</h4>

<p>Client application không quan tâm làm thế nào mà sản phẩm được tạo ra. Nó chỉ chịu trách nhiệm nhận về tên của Concrete Factory</p>

<pre><code>class Application {
    public Application(GUIFactory factory) {
        Button button = factory.createButton();
        Label label = factory.createLabel();
        button.paint();
        label.paint();
    }
}

public class ApplicationRunner {
    public static void main(String[] args) {
        new Application(createOsSpecificFactory());
    }

    public static GUIFactory createOsSpecificFactory() {
        String osname = System.getProperty("os.name").toLowerCase();
        if(osname != null &amp;&amp; osname.contains("windows"))
            return new WinFactory();
        else
            return new OSXFactory();
    }
}
</code></pre>

<h3>Java Example 2</h3>

<h4>Client</h4>

<pre><code>public class App {

    public static void main(String[] args) {
        createKingdom(new ElfKingdomFactory());
        createKingdom(new OrcKingdomFactory());
    }

    public static void createKingdom(KingdomFactory factory) {
        King king = factory.createKing();
        Castle castle = factory.createCastle();
        Army army = factory.createArmy();
        System.out.println("The kingdom was created.");
        System.out.println(king);
        System.out.println(castle);
        System.out.println(army);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Một Số Quan Hệ Giữa Các Class Trong UML]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/10/mot-so-quan-he-giua-cac-class-trong-uml/"/>
    <updated>2015-07-10T10:53:15+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/10/mot-so-quan-he-giua-cac-class-trong-uml</id>
    <content type="html"><![CDATA[<p>Quan hệ giữa các class trong UML, gồm có các 4 quan hệ chính sau:</p>

<ol>
<li>Realization</li>
<li>Generation</li>
<li>Dependency</li>
<li>Association: có 2 quan hệ phân biệt Aggregation &amp; Composition</li>
</ol>


<h3>Quan hệ Realization (hiện thực hóa)</h3>

<p>Là quan hệ giữa một classifier đóng vai trò là hợp đồng và một classifier đóng vai trò thực hiện. Hay nói cách khác:</p>

<p>Mối quan hệ giữa 1 class implement 1 interface được gọi là quan hệ realization, được biểu diễn bởi đường đứt nét có hình mũi tên tam giác chỉ vào interface.</p>

<p><img src="http://i.imgur.com/24Do9yQ.png"></p>

<h3>Quan hệ generalization (tên khác là Inheritance)</h3>

<p>Còn có tên khác là:</p>

<ul>
<li>Quan hệ tổng quát hóa</li>
<li>Quan hệ khái quát hóa</li>
<li>Quan hệ kế thừa</li>
</ul>


<p>Đối tượng cụ thể (concrete) sẽ kế thừa các thuộc tính và phương thức của đối tượng tổng quát (general)</p>

<p>Ký hiệu: A is-a B</p>

<p><img src="http://i.imgur.com/jYOTHlb.png"></p>

<p>Đọc là :</p>

<ul>
<li>A là tổng quát của B, B là chi tiết của A</li>
<li>B là trường hợp đặc biệt của A</li>
<li>A là cha của B, B là con của A</li>
</ul>


<h3>Quan hệ Dependency (phụ thuộc)</h3>

<p>Là quan hệ giữa 2 phần tử trong mô hình mà thay đổi ở phần tử này (phần tử độc lập) có thể gây ra thay đổi ở phần tử kia (phần tử phục thuộc).</p>

<p>Là loại quan hệ giữa 2 object</p>

<p>ClassA và ClassB không có quan hệ Association</p>

<p>Trong ClassA có sử dụng biến toàn cục (kiểu B), hoặc sử dụng phương thức/thuộc tính static của ClassB</p>

<p>Ký hiệu : A use-a B ,  bằng mũi tên 1 chiều nét đứt , từ bên phụ thuộc sang bên độc lập ;</p>

<p><img src="http://i.imgur.com/vj6U2En.png"></p>

<p>ClassA “phụ thuộc” vào ClassB ;</p>

<p>Client –> Supplier (phần tử phục thuộc –> phần tử độc lập)</p>

<p>Dependency còn có một số biểu hiện khác , thường dùng các stereotype sau :</p>

<ul>
<li><p><code>&lt;&lt;use&gt;&gt;</code> : chỉ rằng ngữ nghĩa của lớp gốc (mũi tên) phụ thuộc vào lớp ngọn (mũi tên) . Đặc biệt trong trường hợp lớp gốc dùng lớp ngọn làm tham số trong 1 số method của nó</p></li>
<li><p><code>&lt;&lt;permit&gt;&gt;</code> : chỉ rằng lớp gốc được quyền truy cập 1 cách đặc biệt vào lớp ngọn (chẳng hạn truy cập các thao tác riêng tư). Tương ứng với khái niệm friend trong C++</p></li>
<li><p><code>&lt;&lt;refine&gt;&gt;</code> : chỉ rằng lớp gốc ở 1 mức độ tinh chế cao hơn từ lớp ngọn . Chẳng hạn 1 lớp lập ở giai đoạn thiết kế nhằn tinh chế cùng lớp đó lập ở giai đoạn phân tích</p></li>
</ul>


<p>Lưu ý : Phân biệt giữa Dependency và Association</p>

<ul>
<li>Association là quan hệ cấu trúc</li>
<li>Dependency là qua hệ phi cấu trúc</li>
</ul>


<h3>Association</h3>

<p>Giữa 2 object của 2 lớp có sự ghép cặp (vợ – chồng , thầy – trò , khách hàng – hóa đơn …) . Tập hợp các kết nối cùng loại (cùng ý nghĩa) giữa các object của 2 lớp tạo thành mối liên kết association , quan hệ giữa 2 tập hợp (2 lớp)</p>

<p>Là mỗi liên hệ giữa 2 lớp có  role, role là tên vai trò của mối liên kết : vd như : của , cho , có , liên kết tới , trao đối với , …. (thường tên role có kèm theo 1 mũi tên để chỉ hướng quan hệ áp dụng từ lớp nào sang lớp nào)</p>

<p>Ký hiệu : A has-a B</p>

<p><img src="http://i.imgur.com/N6nkWbx.png"></p>

<p>Ý nghĩa : (trường hợp mũi tên không có chiều)
- Hoặc  : Trong ClassA có thuộc tính có kiểu là ClassB
- Hoặc  : Trong ClassB có thuộc tính có kiểu là ClassA</p>

<p>Nhận xét :</p>

<ul>
<li>Về mặt lập trình, thuộc tính có thể được lưu trữ dạng biến đơn, biến mảng, hay biến con trỏ</li>
<li>Có hoặc không có bản số cũng được</li>
<li>Có hoặc không có mũi tên cũng được</li>
<li>Nếu có mũi tên 1 chiều , chỉ ra chiều đối tượng thuộc lớp này chỉ có gọi đối tượng của lớp kia, không có chiều ngược lại</li>
<li>Nếu không có mũi tên nào thì tương đương là mũi tên 2 chiều , hoặc chiều không quan trọng.</li>
<li><code>Multiplicity</code> là bản số , lượng số , số object bên này tham gia vào mối kết hợp so với 1 object bên kia.</li>
</ul>


<h3>Quan hệ Aggregation (còn gọi là quan hệ thu nạp)</h3>

<p>Đã xác định được ClassA và ClassB có quan hệ Association với nhau</p>

<p>Xác định rõ hơn:</p>

<p>Trong object của ClassA có chứa (trong phần thuộc tính) object của ClassB</p>

<p>ObjectX của ClassA bị hủy thì ObjectY của ClassB (bên trong ObjectX) vẫn có thể còn tồn tại</p>

<p>Còn gọi là shared-aggregation.Một dạng của nối kết, trong đó một phần tử này chứa các phần tử khác.</p>

<p>Ký hiệu :</p>

<p><img src="http://i.imgur.com/nrYxfcB.png"></p>

<p>Ý nghĩa : còn gọi là : Whole A – Part B . Nghĩa là A được tạo từ nhiều B kết hợp lại , và B có thể tạo ra độc lập , không cần phải tạo ra A , B có thể cùng thuộc 1 whole khác A.</p>

<p>Chú ý : Từ share ở đây có nghĩa là , B có thể là bộ phận của whole khác, do đó A bị hủy thì chưa chắc B bị hủy .</p>

<h3>Quan hệ Composition (hợp thành)</h3>

<p>Là loại aggregation chặt chẽ hơn , còn gọi là non-shared aggregation.</p>

<p>Ký hiệu :</p>

<p><img src="http://i.imgur.com/HMYgISe.png"></p>

<p>Ý nghĩa : còn gọi là Whole A – Part B . Nghĩa là A được tạo từ nhiều B kết hợp lại , nhưng B không thể đứng 1 mình được , B chỉ là thuộc A mà thôi không thể cùng thuộc Whole khác được.</p>

<p>Đã xác định được ClassA và ClassB có quan hệ Association với nhau</p>

<p>Xác định rõ hơn:</p>

<ul>
<li>Trong object của ClassA có chứa (trong phần thuộc tính) object của ClassB</li>
<li>ObjectX của ClassA bị hủy thì ObjectY của ClassB (bên trong ObjectX) không thể còn tồn tại</li>
</ul>


<p>Chú ý :</p>

<ul>
<li>B chỉ có thể là bộ phận của whole A</li>
<li>A chết thì tất cả B chết</li>
<li>B chết không ảnh hưởng đến A</li>
<li>Bản số của Whole A luôn là 1, nghĩa là B luôn thuộc 1 A thôi</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tạo Blog Miễn Phí Bằng Octopress &amp; Github]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/10/tao-blog-mien-phi-bang-octopress-and-github/"/>
    <updated>2015-07-10T10:38:33+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/10/tao-blog-mien-phi-bang-octopress-and-github</id>
    <content type="html"><![CDATA[<h3>Octopress</h3>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ bundle install --path vendor/bundle
</code></pre>

<h3>Thiết lập theme</h3>

<pre><code>$ git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
$ rake install['whitespace'] # for zsh, use: rake install\['whitespace'\]
$ rake generate
</code></pre>

<h3>Thêm bài viết</h3>

<pre><code>$ rake new_post['Hello world']
</code></pre>

<h3>Xem trước</h3>

<pre><code>$ rake preview
</code></pre>

<h3>GitHub Pages</h3>

<pre><code>$ rake setup_github_pages
</code></pre>

<h3>Triển khai</h3>

<pre><code>$ rake generate
$ rake deploy
</code></pre>
]]></content>
  </entry>
  
</feed>
