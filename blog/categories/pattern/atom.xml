<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pattern | ダン・クァン・ミン Blog]]></title>
  <link href="http://dankuanmei.github.io/blog/categories/pattern/atom.xml" rel="self"/>
  <link href="http://dankuanmei.github.io/"/>
  <updated>2015-09-03T10:47:51+09:00</updated>
  <id>http://dankuanmei.github.io/</id>
  <author>
    <name><![CDATA[ダン・クァン・ミン]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Design Patterns - Factory Methods]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/11/java-design-patterns-factory-methods/"/>
    <updated>2015-07-11T11:38:55+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/11/java-design-patterns-factory-methods</id>
    <content type="html"><![CDATA[<p>Định nghĩa một interface cho việc tạo ra một đối tượng, nhưng để cho các lớp con quyết định lớp nào sẽ tạo đối tượng. Factory Method cho phép một lớp hoãn việc tạo đối tượng sang các lớp con.</p>

<p><img src="http://i.imgur.com/KCE7HIw.png"></p>

<!--more-->


<h2>#</h2>

<p>Interface sản phẩm</p>

<pre><code>public interface Weapon {

}
</code></pre>

<h2>#</h2>

<p>Interface factory chứa method để tạo sản phẩm</p>

<pre><code>public interface Blacksmith {

    Weapon manufactureWeapon(WeaponType weaponType);

}
</code></pre>

<h2>#</h2>

<p>Các subclass factory thực thi để tạo sản phẩm</p>

<pre><code>public class ElfBlacksmith implements Blacksmith {

    public Weapon manufactureWeapon(WeaponType weaponType) {
        return new ElfWeapon(weaponType);
    }

}

public class OrcBlacksmith implements Blacksmith {

    public Weapon manufactureWeapon(WeaponType weaponType) {
        return new OrcWeapon(weaponType);
    }

}
</code></pre>

<h2>#</h2>

<p>Các subclass sản phẩm</p>

<pre><code>public class ElfWeapon implements Weapon {

    private WeaponType weaponType;

    public ElfWeapon(WeaponType weaponType) {
        this.weaponType = weaponType;
    }

    @Override
    public String toString() {
        return "Elven " + weaponType;
    }

}

public class OrcWeapon implements Weapon {

    private WeaponType weaponType;

    public OrcWeapon(WeaponType weaponType) {
        this.weaponType = weaponType;
    }

    @Override
    public String toString() {
        return "Orcish " + weaponType;
    }

}
</code></pre>

<h2>#</h2>

<p>Class chứa loại sản phẩm</p>

<pre><code>public enum WeaponType {

    SHORT_SWORD("short sword"), SPEAR("spear"), AXE("axe"), UNDEFINED("");

    private String title;

    WeaponType(String title) {
        this.title = title;
    }

    @Override
    public String toString() {
        return title;
    }
}
</code></pre>

<h3>Application</h3>

<p>Class chạy thực thi, khởi tạo đối tượng sản phẩm và đối tượng factory. Tạo factory tương ứng với sản phẩm muốn tạo và truyền vào loại sản phẩm.</p>

<pre><code>/**
 * 
 * In Factory Method we have an interface (Blacksmith) with a method for
 * creating objects (manufactureWeapon). The concrete subclasses (OrcBlacksmith,
 * ElfBlacksmith) then override the method to produce objects of their liking.
 * 
 */
public class App {

    public static void main(String[] args) {
        Blacksmith blacksmith;
        Weapon weapon;

        blacksmith = new f();
        weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
        System.out.println(weapon);
        weapon = blacksmith.manufactureWeapon(WeaponType.AXE);
        System.out.println(weapon);

        blacksmith = new ElfBlacksmith();
        weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);
        System.out.println(weapon);
        weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);
        System.out.println(weapon);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Look About Design Pattern]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/04/first-look-about-design-pattern/"/>
    <updated>2015-07-04T21:02:01+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/04/first-look-about-design-pattern</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
