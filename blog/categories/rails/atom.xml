<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | ダン・クァン・ミン Blog]]></title>
  <link href="http://dankuanmei.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://dankuanmei.github.io/"/>
  <updated>2015-08-16T23:20:04+09:00</updated>
  <id>http://dankuanmei.github.io/</id>
  <author>
    <name><![CDATA[ダン・クァン・ミン]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Websocket Deploy on Apache2 With Passenger]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/13/rails-websocket-deploy-on-apache2-with-passenger/"/>
    <updated>2015-08-13T11:26:37+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/13/rails-websocket-deploy-on-apache2-with-passenger</id>
    <content type="html"><![CDATA[<p>Đầu tiên là tạo dự án rails đã.</p>

<pre><code>$ rails new sample-chat -d mysql
</code></pre>

<p>Sau đó config database trong file <code>config/database.yml</code></p>

<p>Bước tiếp theo đó là cài đặt gem <code>websocket-rails</code>trong <code>Gemfile</code></p>

<pre><code>gem "websocket-rails"
</code></pre>

<p>Chạy lệnh <code>bundle install</code></p>

<p>Chạy lệnh <code>rails g websocket_rails:install</code></p>

<p>WebsocketRailsコントローラの作成. Tạo file <code>app/controllers/websocket_chat_controller.rb</code></p>

<pre><code># WebsocketRails::BaseControllerを継承
class WebsocketChatController &lt; WebsocketRails::BaseController
  def message_recieve
    # クライアントからのメッセージを取得
    recieve_message = message()
    # websocket_chatイベントで接続しているクライアントにブロードキャスト
    broadcast_message(:websocket_chat, recieve_message)
  end
end
</code></pre>

<p>Event Routerの設定. Sửa file <code>events.rb</code> trong thư mục config</p>

<pre><code>WebsocketRails::EventMap.describe do
  subscribe :websocket_chat, to: WebsocketChatController, with_method: :message_recieve
end
</code></pre>

<p>Tạo controller Chat đơn giản</p>

<pre><code>$ rails g controller Chat index
</code></pre>

<p>Trong file <code>index.html.erb</code> chèn source code này vào</p>

<pre><code>&lt;!-- チャット表示部分 --&gt;
&lt;ul id="chat_area"&gt;&lt;/ul&gt;

&lt;!-- コメントフォーム --&gt;
&lt;input id="comment" type="text"&gt;
&lt;input id="send" type="button" value="send"&gt;

&lt;script&gt;
  var ws_rails = new WebSocketRails("sample-chat.local:3001/websocket");
  // メッセージ受信時の処理
  ws_rails.bind("websocket_chat", function(message){
    var message_li = document.createElement("li");
    message_li.textContent = message;
    document.getElementById("chat_area").appendChild(message_li);
  });

  // メッセージ送信時の処理
  document.getElementById("send").onclick =  function(){
    var comment = document.getElementById("comment").value;
    ws_rails.trigger("websocket_chat", comment);
  }
&lt;/script&gt;
</code></pre>

<p>Rack::Lockの無効化. Trong file <code>config/environments/development.rb</code>, viết thêm dòng config này vào:</p>

<pre><code>config.middleware.delete Rack::Lock
</code></pre>

<p>Vậy là đã xong phần source code, giờ thì sẽ triển khai deploy trên Apache2, với Passenger &amp; Virtualhost.</p>

<p>Trong Gemfile điền thêm hai gem:</p>

<pre><code># Deploy
gem 'passenger'
gem 'therubyracer', platforms: :ruby
</code></pre>

<p>Bundle install xong thì chạy lệnh <code>passenger-install-apache2-module</code>. Thiết lập Passenger cho thằng Apache2.</p>

<p>Thiết lập thêm theo cách này cho chắc ăn. Nhưng hình như sẽ bị cảnh báo là confict. Hiện thời chưa thấy confilct gì cả.</p>

<p>First, install the PGP key for the repository server:</p>

<pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
</code></pre>

<p>Create an APT source file:</p>

<pre><code>sudo nano /etc/apt/sources.list.d/passenger.list
</code></pre>

<p>Insert the following line to add the Passenger repository to the file:</p>

<pre><code>deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main
</code></pre>

<p>Press CTRL+X to exit, type Y to save the file, and then press ENTER to confirm the file location.</p>

<p>Change the owner and permissions for this file to restrict access to root:</p>

<pre><code>sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
</code></pre>

<p>Update the APT cache:</p>

<pre><code>sudo apt-get update
</code></pre>

<p>Finally, install Passenger:</p>

<pre><code>sudo apt-get install libapache2-mod-passenger
</code></pre>

<p>Make sure the Passenger Apache module; it maybe enabled already:</p>

<pre><code>sudo a2enmod passenger
</code></pre>

<p>Restart Apache:</p>

<pre><code>sudo service apache2 restart
</code></pre>

<p>Giờ là lúc setup server apache. Hiện tại thì bắt buộc phải copy source code vào trong thư mục <code>/var/www</code>, khá là bất tiện.</p>

<pre><code>$ sudo vim /etc/apache2/sites-available/sample-chat.local.conf
</code></pre>

<p>Sau đó chèn code sau</p>

<pre><code>&lt;virtualhost *:80&gt;
    DocumentRoot "/var/www/sample-chat/public"
    ServerName sample-chat.local
    SetEnv RACK_ENV development

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    &lt;Directory "/var/www/sample-chat/public"&gt;
      Options FollowSymLinks
      Require all granted
    &lt;/directory&gt;

&lt;/virtualhost&gt;
</code></pre>

<p>Say đó sửa file <code>/etc/hosts</code> để thiết lập domain ảo ở local.</p>

<p>Chạy lệnh</p>

<pre><code>$ sudo a2ensite sample-chat.local
$ sudo service apache2 reload
$ sudo service apache2 restart
</code></pre>

<p>Vào trong thư mục source code chạy lệnh <code>rake secret</code>sau đó copy đoạn mã vào trong file <code>config/secret.yml</code></p>

<p>Sửa config trong file <code>config/initializers/websocket_rails.rb</code> về <code>config.standalone = true</code>. Sau đó chạy lệnh:</p>

<pre><code>$ rake websocket_rails:start_server
$ rake assets:precompile
</code></pre>

<p>Vậy là đã hoàn tất!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial - Step by Step]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/08/08/rails-tutorial-step-by-step/"/>
    <updated>2015-08-08T10:49:19+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/08/08/rails-tutorial-step-by-step</id>
    <content type="html"><![CDATA[<h2>Init project</h2>

<h3>Create project</h3>

<pre><code>$ rails new project-name -d mysql
$ cd project-name
$ bundle install
$ bundle update
</code></pre>

<h3>Init bitbucket and heroku</h3>

<pre><code>$ git init
$ git remote add origin git@bitbucket.org:&lt;username&gt;/&lt;project-name&gt;

$ heroku create
$ heroku apps:rename &lt;new-name&gt;
</code></pre>

<h3>Config heroku</h3>

<h4>Gemfile</h4>

<pre><code>group :production do
  gem 'puma'
  gem 'pg',             '0.17.1'
  gem 'rails_12factor', '0.0.2'
end
</code></pre>

<h4>Puma config</h4>

<p>Create <code>Procfile</code></p>

<pre><code>web: bundle exec puma -C config/puma.rb
</code></pre>

<p>Create a configuration file for Puma at <code>config/puma.rb</code></p>

<pre><code>workers Integer(ENV['WEB_CONCURRENCY'] || 2)
threads_count = Integer(ENV['MAX_THREADS'] || 5)
threads threads_count, threads_count

preload_app!

rackup      DefaultRackup
port        ENV['PORT']     || 3000
environment ENV['RACK_ENV'] || 'development'

on_worker_boot do
  ActiveRecord::Base.establish_connection
end
</code></pre>

<p>Run command</p>

<pre><code>$ heroku config:set MIN_THREADS=1 MAX_THREADS=1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RESTful API in a Rails Application]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/20/building-a-restful-api-in-a-rails-application/"/>
    <updated>2015-07-20T13:02:29+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/20/building-a-restful-api-in-a-rails-application</id>
    <content type="html"><![CDATA[<h3>Auto setup</h3>

<pre><code>rails new PROJECT -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb
</code></pre>

<p>PROJECT is name</p>

<h3>Devise</h3>

<p>Devise is a flexible authentication solution for Rails based on Warden. It:</p>

<ul>
<li>Is Rack based;</li>
<li>Is a complete MVC solution based on Rails engines;</li>
<li>Allows you to have multiple models signed in at the same time;</li>
<li>Is based on a modularity concept: use only what you really need.</li>
</ul>


<p>It&rsquo;s composed of 10 modules:</p>

<ul>
<li><code>Database Authenticatable</code> encrypts and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.</li>
<li><code>Omniauthable</code> adds OmniAuth (<a href="https://github.com/intridea/omniauth">https://github.com/intridea/omniauth</a>) support.</li>
<li><code>Confirmable</code> sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.</li>
<li><code>Recoverable</code> resets the user password and sends reset instructions.</li>
<li><code>Registerable</code> handles signing up users through a registration process, also allowing them to edit and destroy their account.</li>
<li><code>Rememberable</code> manages generating and clearing a token for remembering the user from a saved cookie.</li>
<li><code>Trackable</code> tracks sign in count, timestamps and IP address.</li>
<li><code>Timeoutable</code> expires sessions that have not been active in a specified period of time.</li>
<li><code>Validatable</code> provides validations of email and password. It&rsquo;s optional and can be customized, so you&rsquo;re able to define your own validations.</li>
<li><code>Lockable</code> locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.</li>
</ul>


<h5>Getting started</h5>

<pre><code>gem 'devise'

rails generate devise:install

rails generate devise MODEL
</code></pre>

<p>Replace MODEL with the class name used for the application’s users (it’s frequently User but could also be Admin).</p>

<p>This will create a model (if one does not exist) and configure it with default Devise modules. The generator also configures your config/routes.rb file to point to the Devise controller.</p>

<p>Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&rsquo;ll need to uncomment the Confirmable section in the migration.</p>

<p>Then run:</p>

<pre><code>rake db:migrate
</code></pre>

<p>Next, you need to set up the default URL options for the Devise mailer in each environment.</p>

<p>Here is a possible configuration for config/environments/development.rb:</p>

<pre><code>config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Server]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/06/rails-server/"/>
    <updated>2015-07-06T11:25:09+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/06/rails-server</id>
    <content type="html"><![CDATA[<h2>Rails Server Throwdown: Passenger, Unicorn or Puma?</h2>

<p>Every millisecond counts. As professionals from industries outside the technology sector turn to web apps to run their businesses, shaving a minuscule amount of response time from your process can mean the difference between keeping an end user happy and losing their company’s account. It’s fair game to expect your Rails server to handle load balancing, to deter DDoS attacks, and to manage your app’s reverse proxy requests.</p>

<p>Selecting a Rails server can set the pace for your app’s speed and scalability down the road, and switching horses mid-stream can lead to some tough client conversations. Even as hardware gets more robust and cloud computing platforms aim to replace dedicated servers, three of the most popular Rails server products got major updates in the past few months. Therefore, we set out to compare Passenger, Unicorn, and Puma to see if there’s more than a slight difference in performance.</p>

<h3>Rails Server #1: Passenger</h3>

<p>Passenger still gets the Rails Core Team’s vote as the “preferred way to deploy your Rails applications,” according to Phusion’s website. After a significant update during the summer, this popular Rails server now comes in two flavors: open source and Enterprise. This popular module directly integrates with Apache or NGINX, so you can upload and run your application code with ease.</p>

<p>Thanks to built-in deployment error resistance, Passenger can shut down all application processes when it encounters a configuration error or a glitch in an application’s code. The Enterprise edition of Passenger enables enhanced monitoring and debugging, so you can get to the source of an error in real time. An accepted standard for many corporate server environments, Phusion’s website boasts of over 150,000 leading companies running apps with Passenger.</p>

<h3>Rails Server #2: Unicorn</h3>

<p>When James Pozdena benchmarked Unicorn in 2009, it maintained consistent average response times of around a second, even when hammered by concurrent requests. Podenza noted that Passenger’s maximum response time grew by as much as a second with each concurrent request.</p>

<p>However, Urban Influence’s Nate Miller discovered that Unicorn’s speed comes at a cost. While testing Unicorn as a replacement for a Mongrel deployment experiencing a high number of 502 Bad Gateway errors, Miller benchmarked a similar drop in average response time on Unicorn. However, Unicorn’s standard deviation for gateway errors increased significantly, raising concerns that the speed gains could leave the door open to increased instability.</p>

<h3>Rails Server #3: Puma</h3>

<p>Evan Phoenix took a “Back to the Future” approach to rails servers, rewriting code from Mongrel that hearkens back to what Phoenix calls a “pre-rack world.” His benchmarks show Puma using less than one-tenth the active memory of a similar Unicorn setup, while trouncing competitors in speed tests. Puma leverage’s Mongrel’s heritage HTTP parser, offering accuracy without the “stuck mongrel” issues that dogged early Rails deployments.</p>

<p>Puma runs best with Rubinius or JRuby, implementations that provide true concurrency. As developers prepare for Rails 4, some admins report significant speed improvements when combining Puma with NGINX’s proxy functionality. As recent Ruby converts search for Rails servers, developers have noticed the difference between a slow stack and a system supercharged with Puma.</p>

<h3>Verdict</h3>

<p>Even though Passenger’s recent updates address both speed and stability, Puma offers a lean and fast web server solution for most applications that require high concurrency. Of course, it always makes sense to run your own benchmarks and application tests. However, with growing support for Puma on many cloud-based application servers, this significantly refreshed version of Mongrel should be easy for you to test and to enjoy.</p>

<h2>Deploy</h2>

<h3>Rails Server #1: Passenger</h3>

<h3>Rails Server #2: Unicorn</h3>

<h3>Rails Server #3: Puma</h3>
]]></content>
  </entry>
  
</feed>
