<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | ダン・クァン・ミン Blog]]></title>
  <link href="http://dankuanmei.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://dankuanmei.github.io/"/>
  <updated>2015-07-10T20:14:50+09:00</updated>
  <id>http://dankuanmei.github.io/</id>
  <author>
    <name><![CDATA[ダン・クァン・ミン]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Design Patterns - Abstract Factory]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/10/java-design-patterns-abstract-factory/"/>
    <updated>2015-07-10T20:08:31+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/10/java-design-patterns-abstract-factory</id>
    <content type="html"><![CDATA[<p>The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes.In normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part of the theme. The client doesn&rsquo;t know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products.This pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface.</p>

<p>An example of this would be an abstract factory class DocumentCreator that provides interfaces to create a number of products (e.g. createLetter() and createResume()). The system would have any number of derived concrete versions of the DocumentCreator class like FancyDocumentCreator or ModernDocumentCreator, each with a different implementation of createLetter() and createResume() that would create a corresponding object like FancyLetter or ModernResume. Each of these products is derived from a simple abstract class like Letter or Resume of which the client is aware. The client code would get an appropriate instance of the DocumentCreator and call its factory methods. Each of the resulting objects would be created from the same DocumentCreator implementation and would share a common theme (they would all be fancy or modern objects). The client would only need to know how to handle the abstract Letter or Resume class, not the specific version that it got from the concrete factory.</p>

<p>A factory is the location of a concrete class in the code at which objects are constructed. The intent in employing the pattern is to insulate the creation of objects from their usage and to create families of related objects without having to depend on their concrete classes.This allows for new derived types to be introduced with no change to the code that uses the base class.</p>

<p>Use of this pattern makes it possible to interchange concrete implementations without changing the code that uses them, even at runtime. However, employment of this pattern, as with similar design patterns, may result in unnecessary complexity and extra work in the initial writing of code. Additionally, higher levels of separation and abstraction can result in systems which are more difficult to debug and maintain.</p>

<p>Abstract Factory, đầy đủ là Abstract Factory pattern, cung cấp một giao diện lớp có chức năng tạo ra một tập hợp các đối tượng liên quan hoặc phụ thuộc lẫn nhau mà không chỉ ra đó là những lớp cụ thể nào tại thời điểm thiết kế.Mẫu thiết kế Abstract Factory đóng gói một nhóm những lớp đóng vai trò &ldquo;sản xuất&rdquo; (Factory) trong ứng dụng, đây là những lớp được dùng để tạo lập các đối tượng. Các lớp sản xuất này có chung một giao diện lập trình được kế thừa từ một lớp cha thuần ảo gọi là &ldquo;lớp sản xuất ảo&rdquo;.</p>

<h3>Java Example</h3>

<pre><code>//GuiFactory example

//Abstract Product
interface Button {
    void paint();
}
//Abstract Product
interface Label {
    void paint();
}

//Abstract Factory
interface GUIFactory {
    Button createButton();
    Label createLabel();
}

//Concrete Factory
class WinFactory implements GUIFactory {
    public Button createButton() {
        return new WinButton();
    }

    public Label createLabel() {
        return new WinLabel();
    }
}

//Concrete Factory
class OSXFactory implements GUIFactory {
    public Button createButton() {
        return new OSXButton();
    }

    public Label createLabel() {
        return new OSXLabel();
    }

}

//Concrete Product
class OSXButton implements Button {
    public void paint() {
        System.out.println("I'm an OSXButton");
    }
}

//Concrete Product
class WinButton implements Button {
    public void paint() {
        System.out.println("I'm a WinButton");
    }
}

//Concrete Product
class OSXLabel implements Label {
    public void paint() {
        System.out.println("I'm an OSXLabel");
    }
}

//Concrete Product
class WinLabel implements Label {
    public void paint() {
        System.out.println("I'm a WinLabel");
    }
}

//Client application is not aware about the how the product is created. Its only responsible to give a name of 
//concrete factory
class Application {
    public Application(GUIFactory factory) {
        Button button = factory.createButton();
        Label label = factory.createLabel();
        button.paint();
        label.paint();
    }
}

public class ApplicationRunner {
    public static void main(String[] args) {
        new Application(createOsSpecificFactory());
    }

    public static GUIFactory createOsSpecificFactory() {
        String osname = System.getProperty("os.name").toLowerCase();
        if(osname != null &amp;&amp; osname.contains("windows"))
            return new WinFactory();
        else
            return new OSXFactory();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java for Beginner]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/09/java-for-beginner/"/>
    <updated>2015-07-09T19:40:19+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/09/java-for-beginner</id>
    <content type="html"><![CDATA[<h3>Nguyên tắc trong java</h3>

<p>Dưới đây là năm mục tiêu chính khi làm việc với ngôn ngữ Java:</p>

<ul>
<li>Nó phải &ldquo;đơn giản, hướng đối tượng, và gần gũi&rdquo;.</li>
<li>Nó phải &ldquo;mạnh mẽ và bảo mật&rdquo;.</li>
<li>Nó phải &ldquo;Độc lập với cấu trúc và dễ di chuyển&rdquo;.</li>
<li>Nó phải &ldquo;hiệu suất cao&rdquo;.</li>
<li>Nó phải &ldquo;đa luồng, và có tính động&rdquo;</li>
</ul>


<h3>Lập trình hướng đối tượng</h3>

<p>Lập trình hướng đối tượng (gọi tắt là OOP, từ chữ Anh ngữ object-oriented programming), hay còn gọi là lập trình định hướng đối tượng, là kĩ thuật lập trình hỗ trợ công nghệ đối tượng. OOP được xem là giúp tăng năng suất, đơn giản hóa độ phức tạp khi bảo trì cũng như mở rộng phần mềm bằng cách cho phép lập trình viên tập trung vào các đối tượng phần mềm ở bậc cao hơn. Ngoài ra, nhiều người còn cho rằng OOP dễ tiếp thu hơn cho những người mới học về lập trình hơn là các phương pháp trước đó.</p>

<p>Một cách giản lược, đây là khái niệm và là một nỗ lực nhằm giảm nhẹ các thao tác viết mã cho người lập trình, cho phép họ tạo ra các ứng dụng mà các yếu tố bên ngoài có thể tương tác với các chương trình đó giống như là tương tác với các đối tượng vật lý.</p>

<p>Những đối tượng trong một ngôn ngữ OOP là các kết hợp giữa mã và dữ liệu mà chúng được nhìn nhận như là một đơn vị duy nhất. Mỗi đối tượng có một tên riêng biệt và tất cả các tham chiếu đến đối tượng đó được tiến hành qua tên của nó. Như vậy, mỗi đối tượng có khả năng nhận vào các thông báo, xử lý dữ liệu (bên trong của nó), và gửi ra hay trả lời đến các đối tượng khác hay đến môi trường.</p>

<h4>Tính trừu tượng (abstraction):</h4>

<p>Đây là khả năng của chương trình bỏ qua hay không chú ý đến một số khía cạnh của thông tin mà nó đang trực tiếp làm việc lên, nghĩa là nó có khả năng tập trung vào những cốt lõi cần thiết. Mỗi đối tượng phục vụ như là một &ldquo;động tử&rdquo; có thể hoàn tất các công việc một cách nội bộ, báo cáo, thay đổi trạng thái của nó và liên lạc với các đối tượng khác mà không cần cho biết làm cách nào đối tượng tiến hành được các thao tác. Tính chất này thường được gọi là sự trừu tượng của dữ liệu.</p>

<p>Tính trừu tượng còn thể hiện qua việc một đối tượng ban đầu có thể có một số đặc điểm chung cho nhiều đối tượng khác như là sự mở rộng của nó nhưng bản thân đối tượng ban đầu này có thể không có các biện pháp thi hành. Tính trừu tượng này thường được xác định trong khái niệm gọi là lớp trừu tượng hay lớp cơ sở trừu tượng.</p>

<h4>Tính đóng gói (encapsulation) và che giấu thông tin (information hiding):</h4>

<p>Tính chất này không cho phép người sử dụng các đối tượng thay đổi trạng thái nội tại của một đối tượng. Chỉ có các phương thức nội tại của đối tượng cho phép thay đổi trạng thái của nó. Việc cho phép môi trường bên ngoài tác động lên các dữ liệu nội tại của một đối tượng theo cách nào là hoàn toàn tùy thuộc vào người viết mã. Đây là tính chất đảm bảo sự toàn vẹn của đối tượng.</p>

<h4>Tính đa hình (polymorphism):</h4>

<p>Thể hiện thông qua việc gửi các thông điệp (message). Việc gửi các thông điệp này có thể so sánh như việc gọi các hàm bên trong của một đối tượng. Các phương thức dùng trả lời cho một thông điệp sẽ tùy theo đối tượng mà thông điệp đó được gửi tới sẽ có phản ứng khác nhau. Người lập trình có thể định nghĩa một đặc tính (chẳng hạn thông qua tên của các phương thức) cho một loạt các đối tượng gần nhau nhưng khi thi hành thì dùng cùng một tên gọi mà sự thi hành của mỗi đối tượng sẽ tự động xảy ra tương ứng theo đặc tính của từng đối tượng mà không bị nhầm lẫn.</p>

<p>Thí dụ khi định nghĩa hai đối tượng &ldquo;hinh_vuong&rdquo; và &ldquo;hinh_tron&rdquo; thì có một phương thức chung là &ldquo;chu_vi&rdquo;. Khi gọi phương thức này thì nếu đối tượng là &ldquo;hinh_vuong&rdquo; nó sẽ tính theo công thức khác với khi đối tượng là &ldquo;hinh_tron&rdquo;.</p>

<h4>Tính kế thừa (inheritance):</h4>

<p>Đặc tính này cho phép một đối tượng có thể có sẵn các đặc tính mà đối tượng khác đã có thông qua kế thừa. Điều này cho phép các đối tượng chia sẻ hay mở rộng các đặc tính sẵn có mà không phải tiến hành định nghĩa lại. Tuy nhiên, không phải ngôn ngữ định hướng đối tượng nào cũng có tính chất này.</p>

<h3>Một số khái niệm cần biết</h3>

<h4>Lớp (class)</h4>

<p>Một lớp có thể được hiểu là khuôn mẫu để tạo ra các đối tượng. Trong một lớp, người ta thường dùng các biến để mô tả các thuộc tính và các hàm để mô tả các phương thức của đối tượng. Khi đã định nghĩa được lớp, ta có thể tạo ra các đối tượng từ lớp này. Để việc sử dụng được dễ dàng, thông qua hệ thống hàm tạo (constructor), người ta dùng lớp như một kiểu dữ liệu để tạo ra các đối tượng.</p>

<h4>Lớp con (subclass)</h4>

<p>Lớp con là một lớp thông thường nhưng có thêm tính chất kế thừa một phần hay toàn bộ các đặc tính của một lớp khác. Lớp chia sẻ sự kế thừa gọi là lớp cha (parent class).</p>

<h4>Lớp trừu tượng hay lớp cơ sở trừu tượng (abstract class)</h4>

<p>Lớp trừu tượng là một lớp mà nó không thể thực thể hóa thành một đối tượng thực dụng được. Lớp này được thiết kế nhằm tạo ra một lớp có các đặc tính tổng quát nhưng bản thân lớp đó chưa có ý nghĩa (hay không đủ ý nghĩa) để có thể tiến hành viết mã cho việc thực thể hóa. (xem thí dụ)</p>

<p>Thí dụ: Lớp &ldquo;hinh&rdquo; được định nghĩa không có dữ liệu nội tại và chỉ có các phương thức (hàm nội tại) &ldquo;tinh_chu_vi&rdquo;, &ldquo;tinh_dien_tich&rdquo;. Nhưng vì lớp hinh này chưa xác định được đầy đủ các đặc tính của nó (cụ thể các biến nội tại là tọa độ các đỉnh nếu là đa giác, là đường bán kính và toạ độ tâm nếu là hình tròn,&hellip;) nên nó chỉ có thể được viết thành một lớp trừu tượng. Sau đó, người lập trình có thể tạo ra các lớp con chẳng hạn như là lớp &ldquo;tam_giac&rdquo;, lớp &ldquo;hinh_tron&rdquo;, lớp &ldquo;tu_giac&rdquo;,&hellip;. Và trong các lớp con này người viết mã sẽ cung cấp các dữ liệu nội tại (như là biến nội tại r làm bán kính và hằng số nội tại Pi cho lớp &ldquo;hinh_tron&rdquo; và sau đó viết mã cụ thể cho các phương thức &ldquo;tinh_chu_vi&rdquo; và &ldquo;tinh_dien_tich&rdquo;).</p>

<h4>Phương thức (method)</h4>

<p>Phương thức của một lớp thường được dùng để mô tả các hành vi của đối tượng (hoặc của lớp). Ví dụ như đối tượng thuộc lớp điện thoại có các hành vi sau: Đổ chuông, chuyển tín hiệu từ sóng sang dạng nghe được, chuyển tín hiệu giọng nói sang dạng chuẩn, chuyển tín hiệu lên tổng đài.v.v. Khi thiết kế, người ta có thể dùng các phương thức để mô tả và thực hiện các hành vi của đối tượng. Mỗi phương thức thường được định nghĩa là một hàm, các thao tác để thực hiện hành vi đó được viết tại nội dung của hàm. Khi thực hiện hành vi này, đối tượng có thể phải thực hiện các hành vi khác. Ví dụ như điện thoại phải chuyển tín hiệu giọng nói sang dạng chuẩn trước khi chuyển lên tổng đài. Cho nên một phương thức trong một lớp có thể sử dụng phương thức khác trong quá trình thực hiện hành vi của mình.</p>

<p>Người ta còn định nghĩa thêm vài loại phương thức đặc biệt:</p>

<ul>
<li>Hàm tạo (constructor) là hàm được dùng để tạo ra một đối tượng, cài đặt các giá trị ban đầu cho các thuộc tính của đối tượng đó.</li>
<li>Hàm hủy (destructor) là hàm dùng vào việc làm sạch bộ nhớ đã dùng để lưu đối tượng và hủy bỏ tên của một đối tượng sau khi đã dùng xong, trong đó có thể bao gồm cả việc xóa các con trỏ nội tại và trả về các phần bộ nhớ mà đối tượng đã dùng.</li>
</ul>


<p>Nhiều lớp thư viện có sẵn hàm tạo mặc định (thông thường không có tham số) và hàm huỷ.</p>

<h4>Thuộc tính (attribute)</h4>

<p>Thuộc tính của một lớp bao gồm các biến, các hằng, hay tham số nội tại của lớp đó. Ở đây, vai trò quan trọng nhất của các thuộc tính là các biến vì chúng sẽ có thể bị thay đổi trong suốt quá trình hoạt động của một đối tượng. Các thuộc tính có thể được xác định kiểu và kiểu của chúng có thể là các kiểu dữ liệu cổ điển hay đó là một lớp đã định nghĩa từ trước. Như đã ghi, khi một lớp đã được thực thể hoá thành đối tượng cụ thể thì tập hợp các giá trị của các biến nội tại làm thành trạng thái của đối tượng. Giống như trường hợp của phương thức, tùy theo người viết mã, biến nội tại có thể chỉ được dùng bên trong các phương thức của chính lớp đó, có thể cho phép các câu lệnh bên ngoài lớp, hay chỉ cho phép các lớp có quan hệ đặc biệt như là quan hệ lớp con, (và quan hệ bạn bè (friend) trong C++) được phép dùng tới nó (hay thay đổi giá trị của nó). Mỗi thuộc tính của một lớp còn được gọi là thành viên dữ liệu của lớp đó.</p>

<h4>Thực thể hóa (instantiate)</h4>

<p>Là quá trình khai báo để có một tên (có thể được xem như là một biến) trở thành một đối tượng từ một lớp nào đó.</p>

<p>Một lớp sau khi được tiến hành thực thể hóa để có một đối tượng cụ thể gọi là một thực thể. Hay nói ngược lại một thực thể là một đối tượng riêng lẻ của một lớp đã định trước. Như các biến thông thường, hai thực thể của cùng một lớp có thể có trạng thái nội tại khác nhau (xác định bởi các giá trị hiện có của các biến nội tại) và do đó hoàn toàn độc lập nhau nếu không có yêu cầu gì đặc biệt từ người lập trình. &ldquo; Thực thể hóa: gần giống như cá nhân hóa. Một lớp khi được &rdquo; cá nhân hóa" sẽ thành một đối tượng cụ thể.</p>

<h4>Công cộng (public)</h4>

<p>Công cộng là một tính chất được dùng để gán cho các phương thức, các biến nội tại, hay các lớp mà khi khai báo thì người lập trình đã cho phép các câu lệnh bên ngoài cũng như các đối tượng khác được phép dùng đến nó.</p>

<h4>Riêng tư (private)</h4>

<p>Riêng tư là sự thể hiện tính chất đóng mạnh nhất (của một đặc tính hay một lớp). Khi dùng tính chất này gán cho một biến, một phương thức thì biến hay phương thức đó chỉ có thể được sử dụng bên trong của lớp mà chúng được định nghĩa. Mọi nỗ lực dùng trực tiếp đến chúng từ bên ngoài qua các câu lệnh hay từ các lớp con sẽ bị phủ nhận hay bị lỗi.</p>

<h4>Bảo tồn (protected)</h4>

<p>Tùy theo ngôn ngữ, sẽ có vài điểm nhỏ khác nhau về cách hiểu tính chất này. Nhìn chung đây là tính chất mà khi dùng để áp dụng cho các phương thức, các biến nội tại, hay các lớp thì chỉ có trong nội bộ của lớp đó hay các lớp con của nó (hay trong nội bộ một gói như trong Java) được phép gọi đến hay dùng đến các phương pháp, biến hay lớp đó.</p>

<p>So với tính chất riêng tư thì tính bảo tồn rộng rãi hơn về nghĩa chia sẻ dữ liệu hay chức năng. Nó cho phép một số trường hợp được dùng tới các đặc tính của một lớp (từ một lớp con chẳng hạn).</p>

<p>Lưu ý: Các tính chất công cộng, riêng tư và bảo tồn đôi khi còn được dùng để chỉ thị cho một lớp con cách thức kế thừa một lớp cha như trong C++.</p>

<h4>Đa kế thừa (multiple inheritance)</h4>

<p>Đây là một tính chất cho phép một lớp con có khả năng kế thừa trực tiếp cùng lúc nhiều lớp khác.</p>

<p>Vài điểm cần lưu ý khi viết mã dùng tính chất đa kế thừa:</p>

<ul>
<li>Khi muốn có một sự kế thừa từ nhiều lớp cha thì các lớp này cần phải độc lập và đặc biệt tên của các dữ liệu hay hàm cho phép kế thừa phải có tên khác nhau để tránh lỗi &ldquo;ambiguity&rdquo;. Bởi vì lúc đó trình dịch sẽ không thể xác định được là lớp con sẽ thừa kế tên nào của các lớp cha.</li>
<li>Nhiều ngôn ngữ, ví dụ như Java, không có đa thừa kế, nhưng chúng có khái niệm giao diện Interface. Với Interface, ta có thể có hầu hết các lợi ích mà đa thừa kế mang lại.</li>
</ul>


<p>Ngoài các khái niệm trên, tùy theo ngôn ngữ, có thể sẽ có các chức năng OOP riêng biệt được cấp thêm vào.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/06/gradle/"/>
    <updated>2015-07-06T13:59:40+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/06/gradle</id>
    <content type="html"><![CDATA[<h2>Gradle.org - Why Gradle?</h2>

<p>Gradle is an advanced build system as well as an advanced build toolkit allowing to create custom build logic through plugins.</p>

<p>Here are some of its features that made us choose Gradle:</p>

<ul>
<li>Domain Specific Language (DSL) to describe and manipulate the build logic</li>
<li>Build files are Groovy based and allow mixing of declarative elements through the DSL and using code to manipulate the DSL elements to provide custom logic.</li>
<li>Built-in dependency management through Maven and/or Ivy.</li>
<li>Very flexible. Allows using best practices but doesn’t force its own way of doing things.</li>
<li>Plugins can expose their own DSL and their own API for build files to use.</li>
<li>Good Tooling API allowing IDE integration</li>
</ul>


<h2>Wikipedia</h2>

<p>Gradle is a build automation tool that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the more traditional XML form of declaring the project configuration. Gradle uses a directed acyclic graph (&ldquo;DAG&rdquo;) to determine the order in which tasks can be run.</p>

<p>Gradle was designed for multi-project builds which can grow to be quite large, and supports incremental builds by intelligently determining which parts of the build tree are up-to-date, so that any task dependent upon those parts will not need to be re-executed.</p>

<p>The initial plugins are primarily focused around Java, Groovy and Scala development and deployment, but more languages and project workflows are on the roadmap.</p>

<h3>Example Java project</h3>

<p>Consider the case where the Maven directory structure is used for Java sources and resources. These directories are: src/main/java, src/main/resources, src/test/java and src/test/resources.</p>

<p>build.gradle</p>

<pre><code>apply plugin: 'java'
</code></pre>

<p>The most simple Android project has the following build.gradle:</p>

<pre><code>buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.1'
    }
}

apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"
}
</code></pre>

<p>Running gradle build will result in</p>

<pre><code>&gt; gradle build
:compileJava
:processResources
:classes
:jar
:assemble
:compileTestJava
:processTestResources
:testClasses
:test
:check
:build

BUILD SUCCESSFUL
</code></pre>

<h2>Tutorial</h2>

<h3>Installation of Gradle and setting it up correctly on your system</h3>

<p>In this part of the tutorial, we shall focus on setting up Gradle on our system. While tools like Android Studio do ship with an internal Gradle distribution, our intention here is to understand the tools, its installation, the setup and firing up some basic Gradle commands.</p>

<h4>Download Gradle</h4>

<p>At the time of this update, Gradle is in version 2.2.1 and is available for download here.</p>

<p>Just go ahead and download the ZIP file to your machine. You should have a file named gradle-2.2.1-all.zip. Expand it to a folder of your choice.</p>

<h4>Environment Settings</h4>

<p>The \bin folder of your gradle distribution contains the gradle script file (both Unix and Windows) that you will use to run the gradle command along with various parameters.</p>

<p>Ideally, do the following:</p>

<ul>
<li>Create an environment variable GRADLE_HOME and point it to the Gradle Installation folder. On my machine, the Gradle installation folder is e:\gradle-2.2.1 and hence I have created a GRADLE_HOME Environment variable that has the value e:\gradle-2.2.1</li>
<li>Add %GRADLE_HOME%\bin to the PATH environment variable. This will allow you to launch gradle command from any directory.</li>
</ul>


<h4>Verify Gradle Setup</h4>

<pre><code>$ gradle -v
</code></pre>

<h4>Basic Gradle commands</h4>

<pre><code>$ gradle -q help

$ gradle -q tasks

$ gradle properties
</code></pre>

<h3>Your first Java Project Build with Gradle</h3>

<h3>Multiple Java Projects with Gradle</h3>

<h3>Java Web Applications with Gradle</h3>

<h3>App Engine Gradle Plugin</h3>

<h3>Gradle + Android Studio</h3>

<h3>Gradle + Android Studio + App Engine</h3>

<h3>Gradle + App Engine + Cloud Endpoints + Android Studio</h3>

<h3>Gradle + App Engine + Cloud Endpoints (Persistence) + Android Studio</h3>

<h3>Consuming Endpoints in your Android application</h3>
]]></content>
  </entry>
  
</feed>
