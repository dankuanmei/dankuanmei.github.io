<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ダン・クァン・ミン Blog]]></title>
  <link href="http://dankuanmei.github.io/atom.xml" rel="self"/>
  <link href="http://dankuanmei.github.io/"/>
  <updated>2015-07-03T13:18:40+09:00</updated>
  <id>http://dankuanmei.github.io/</id>
  <author>
    <name><![CDATA[ダン・クァン・ミン]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Presentation Time Stamp]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/03/the-presentation-time-stamp/"/>
    <updated>2015-07-03T11:03:43+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/03/the-presentation-time-stamp</id>
    <content type="html"><![CDATA[<h2>wikipedia</h2>

<p>The presentation timestamp (PTS) is a timestamp metadata field in an MPEG transport stream or MPEG program stream that is used to achieve synchronization of programs' separate elementary streams (for example Video, Audio, Subtitles) when presented to the viewer. The PTS is given in units related to a program&rsquo;s overall clock reference, either Program Clock Reference (PCR) or System Clock Reference (SCR), which is also transmitted in the transport stream or program stream.</p>

<p>Presentation time stamps have a resolution of 90kHz, suitable for the presentation synchronization task. The PCR or SCR has a resolution of 27MHz which is suitable for synchronization of a decoder&rsquo;s overall clock with that of the usual remote encoder, including driving TV signals such as frame and line sync timing, colour sub carrier, etc.[1]</p>

<p>Decoding of N elementary streams is synchronized by adjusting the decoding of streams to a common master time base rather than by adjusting the decoding of one stream to match that of another. The master time base may be one of the N decoders' clocks, the data source’s clock, or it may be some external clock.[1]</p>

<p>A transport stream may contain multiple programs and each program may have its own time base. The time bases of different programs within a transport stream may be different. Because PTSs apply to the decoding of individual elementary streams, they reside in the PES packet layer of both the transport streams and program streams. End-to-end synchronization occurs when encoders save time stamps at capture time, when the time stamps propagate with associated coded data to decoders, and when decoders use those time stamps to schedule presentations.</p>

<p>Synchronization of a decoding system with a channel is achieved through the use of the SCR in the program stream and by its analog, the PCR, in the transport stream. The SCR and PCR are time stamps encoding the timing of the bit stream itself, and are derived from the same time base used for the audio and video PTS values from the same program. Since each program may have its own time base, there are separate PCR fields for each program in a transport stream containing multiple programs. In some cases it may be possible for programs to share PCR fields.</p>

<h2>Vietnamese</h2>

<p>Có hai loại nhãn thời gian là nhãn thời gian trình diễn PTS (presentation time stamp) và nhãn thời gian giải mã DTS (decode time stamp)</p>

<p>Nhãn thời gian trình diễn được dùng để xác định khi nào thì hình ảnh sẽ được thể hiện trên màn ảnh, còn nhãn thời gian giải mã xác định khi nào hình ảnh được giải mã.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Oxygine Framework]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/03/hello-oxygine-framework/"/>
    <updated>2015-07-03T11:01:46+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/03/hello-oxygine-framework</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<h4>Free, Open Source and Cross-Platform</h4>

<p>Oxygine is completely free and open source (MIT license) 2D game engine, available on BitBucket. It is written in C++ and runs on MacOSX, iOS, Android, Windows and Linux.</p>

<h4>Pure C++</h4>

<p>Oxygine is written in C++. It provides easy to use API, which is designed with &ldquo;do more with less code&rdquo; philosophy. It uses a managed scenegraph system that takes care of rendering and updates, and provides ability to extend with custom rendering and updates.</p>

<h4>Build for Web</h4>

<p>You can build and run your C++ Oxygine application in web browsers. It won’t require any plugins, such as Flash or Unity, and runs as pure HTML5/JS application using WebGL for rendering.</p>

<h4>Embedded Profiling Tools</h4>

<p>You can analyze your application with embedded tools. Inspect in runtime scenegraph, loaded textures, FPS, performance and more.</p>

<h4>Text Rendering</h4>

<p>Accurate unicode text rendering using bitmap fonts created with BMFont tool. Supports different alignment modes and substring colorization.</p>

<h4>Compresed Textures and Atlasses</h4>

<p>Oxygine provides command-line tools to build texture atlases with ability to convert it into compressed formats like PVRTC, ETC and more. Atlases can be automatically resized to any game resolution for higher quality.</p>

<h4>High Performance</h4>

<p>Oxygine is developed to be fast and memory efficient on mobile platforms. It has flexible resources management system, automatic sprites batching, memory pools and more.</p>

<h4>Build on top of the SDL2 and Marmalade</h4>

<p>You can build Oxygine on top of the SDL2, Marmalade, Emscripten or adapt to your platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample About Sort]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/02/sample-about-sort/"/>
    <updated>2015-07-02T19:57:25+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/02/sample-about-sort</id>
    <content type="html"><![CDATA[<h2>Binary Sort</h2>

<pre><code>void BinSort(int x[ ], int n)
{
    int i, j;

    if (n &gt; MAX_DATA) {
        printf("データが多すぎます!\n");
        return;
    }
    else {
        for (i = 0; i &lt; MAX_DATA; i++)
            Bin[i] = 0;             /* 作業用配列の初期化 */

        for (i = 0; i &lt; n; i++)     /* x[i] の値の */
            Bin[x[i]]++;            /* Bin[ ] の要素の値を */
                                    /* インクリメント */
        j = 0;                      /* x[ ] の添字として使用 */
        for (i = 0; i &lt; MAX_DATA ; i++) 
            if (Bin[i])             /* ０でなければ */
            x[j++] = i;             /* 書き戻す */
    }
}
</code></pre>

<h2>Buble Sort</h2>

<pre><code>int BubSort(int x[ ], int n)
{
    int i, j, temp;

    for (i = 0; i &lt; n - 1; i++) {
        for (j = n - 1; j &gt; i; j--) {
            if (x[j - 1] &gt; x[j]) {  /* 前の要素の方が大きかったら */
                temp = x[j];        /* 交換する */
                x[j] = x[j - 1];
                x[j - 1]= temp;
            }
        } 
        /* ソートの途中経過を表示 */
        ShowData(x, NUM_DATA);
    }
}
</code></pre>

<h2>Heap Sort</h2>

<pre><code>void Hpsort(int a[ ], int n)
{
    int leaf, root;

    leaf = n;                   /* 初期値は末尾の要素 */
    root = n/2;                 /* 初期値はその親 */

    while (root &gt; 0 ) {         /* 半順序木を構成 */
        DownHeap(a, leaf, root);
        root--;
    }

    while(leaf &gt; 0) {
        Swap(a, 1, leaf);       /* 半順序木の根と末尾の要素を交換 */
        leaf--;                 /* 末尾の要素を半順序木から外す */
        DownHeap(a, leaf, 1);   /* 半順序木を再構成する */
    }
}

void DownHeap(int a[ ],  int leaf, int root)
{
    int i;

    i = root * 2;
    while (i &lt;= leaf) {
        if (i &lt; leaf &amp;&amp; a[i + 1] &gt; a[i])  /* a[i] と a[i + 1]  の大きい方と */
            i++;
        if (a[root] &gt;= a[i])              /* a[root] と比較 */
            break;                        /* 子の方が大きければ */
        Swap(a, root, i);                 /* 交換 */

        root = i;                         /* 更にその子についても調べる */
        i = root * 2;
    }
}

void Swap(int a[ ], int i, int j)
{
    int temp;

    temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}
</code></pre>

<h2>Quick Sort</h2>

<pre><code>void QSort(int x[ ], int left, int right)
{
    int i, j;
    int pivot;

    i = left;                      /* ソートする配列の一番小さい要素の添字 */
    j = right;                     /* ソートする配列の一番大きい要素の添字 */

    pivot = x[(left + right) / 2]; /* 基準値を配列の中央付近にとる */

    while (1) {                    /* 無限ループ */

        while (x[i] &lt; pivot)       /* pivot より大きい値が */
            i++;                   /* 出るまで i を増加させる */

        while (pivot &lt; x[j])       /* pivot より小さい値が */
            j--;                   /*  出るまで j を減少させる */
        if (i &gt;= j)                /* i &gt;= j なら */
            break;                 /* 無限ループから抜ける */

        Swap(x, i, j);             /* x[i] と x[j]を交換 */
        i++;                       /* 次のデータ */
        j--;
    }

    if (left &lt; i - 1)              /* 基準値の左に 2 以上要素があれば */
        QSort(x, left, i - 1);     /* 左の配列を Q ソートする */
    if (j + 1 &lt;  right)            /* 基準値の右に 2 以上要素があれば */
        QSort(x, j + 1, right);    /* 右の配列を Q ソートする */
}

void Swap(int x[ ], int i, int j)
{
    int temp;

    temp = x[i];
    x[i] = x[j];
    x[j] = temp;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://dankuanmei.github.io/blog/2015/07/02/hello-world/"/>
    <updated>2015-07-02T19:13:45+09:00</updated>
    <id>http://dankuanmei.github.io/blog/2015/07/02/hello-world</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
